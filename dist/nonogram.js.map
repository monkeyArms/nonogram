{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/utility.js","webpack:///./src/puzzle.js","webpack:///./src/puzzle-cell.js","webpack:///./src/puzzle-line.js","webpack:///./src/solver.js","webpack:///./src/creator.js","webpack:///./src/gui-template.js","webpack:///./src/puzzle-library.js","webpack:///./src/gui.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","_classCallCheck","this","array","index","indexOf","splice","length","Array","fill","slice","min","max","minCeil","Math","ceil","maxFloor","floor","random","Puzzle","width","height","puzzle_classCallCheck","toString","parseInt","totalCells","reset","_this","zeroFill","getZeroFilledArray","creator","cells","rowHints","columnHints","grid","map","every","cell","userValue","userSolution","solution","row","start","end","push","column","indexInt","PuzzleCell","params","puzzle_cell_classCallCheck","aiSolution","assign","PuzzleLine","puzzle_line_classCallCheck","type","minimumSectionLength","sections","solved","Solver","puzzle","solver_classCallCheck","_reset","passStart","passElapsedTime","totalElapsedTime","lineKey","line","Date","getTime","lastProgress","pass","isReset","_log","_getProgress","_getTotalSolved","lines","eliminateImpossibleFits","findKnownPositivesAndNegatives","findSectionDefiningChains","findAnchoredSections","findCompletedSections","findCompletedLines","elapsedTime","section","possibleStartIndex","newPossibleStartIndexes","lineSectionKey","startIndexKey","testCell","lineCellKey","minimumStartIndex","maximumStartIndex","_setCellSolution","cloneArray","possibleStartIndexes","removeFromArray","sectionKey","cellCounts","cellCountKey","cellCount","totalCellCounts","fillRange","firstSection","lastSection","cellKey","chain","chainKey","firstSortedSection","chains","lastValue","sort","a","b","firstNegative","lastNegative","totalSectionLength","totalPositiveSolved","rowNumber","rowCells","len","columnKey","columnHint","possibleRowIndexes","possibleColumnIndexes","solutionLog","getRowCells","knownIndexes","getColumnCells","puzzleCell","isRow","isCol","cellsSolved","html","cssClass","total","maxPossibilities","totalPossibilities","Creator","creator_classCallCheck","rowKey","currentVal","lastVal","hintKey","hint","density","cellsFilled","chanceOfCellFill","solutionGrid","rowArray","cellValue","solver","elapsed","puzzleValid","densityValid","getRandomIntBetween","_populatePuzzleFromGrid","solve","_logLine","creationTime","solvingTime","forEach","hints","_typeof","solvedCell","cellIndex","getCellByIndex","msg","log","GuiTemplate","path","gui_template_classCallCheck","onLoadedCallbacks","isLoaded","loadedPromise","callback","Promise","resolve","fetch","then","response","ok","text","fireOnLoaded","div","document","createElement","innerHTML","PuzzleLibrary","Small Example 1","Small Example 2","Small Example 3","Medium Example 1","Medium Example 2","Large Example 1","Gui","themePath","gui_classCallCheck","head","querySelector","link","boardSizes","handle","size","boardSize","themeStylesheetPath","rel","href","prepend","templatesLoaded","themeTemplatesPath","templates","template","load","_this2","all","drawGenerateControls","drawPuzzle","drawGameControls","drawConsole","_this3","_getTemplate","gridContainer","container","node","getNode","theadThTemplate","rowTemplate","cellClasses","tl","tr","bl","br","columnIndex","theadTh","importNode","content","fillDiv","setAttribute","classList","add","span","textContent","appendChild","parentNode","insertBefore","cellTemplate","hintsFillDiv","td","keys","innerHtml","_resizeBoardForAvailableScreen","_makePuzzlePlayable","drawPreview","_this4","fillModeCheckbox","addEventListener","fillModeLabel","prevActive","prevInactive","remove","checked","playerClickMode","e","dispatchEvent","MouseEvent","_this5","clonedWidthOptions","cloneHeightOptions","widthOption","heightOption","clonedExampleOptions","exampleOption","chooseSelect","clonedSizeOptions","sizeOption","generate","widthSelect","heightSelect","widthOptions","heightOptions","chooseExampleSelect","boardSizeSelect","boardSizeOptions","puzzleName","selectedExample","sizeObj","createRandom","draw","puzzleDef","createFromGrid","createFromHints","item","_changeBoardSize","_resetPuzzle","drawSolution","_showPuzzleSolved","_this6","output","code","solutionType","_this7","cellSize","canvas","ctx","getContext","parentContainer","parentElement","parentWidth","offsetWidth","parentHeight","offsetHeight","containerRatio","puzzleRatio","fillRect","_this8","querySelectorAll","cellElem","puzzleTable","sizeSelect","table","availableWidth","clientWidth","sortedBoardSizes","_this9","allCells","hoverCell","currentTarget","getAttribute","solvedP","preventDefault","toggle","checkUserSolution","cellElements","puzzleGrid","tableCells","ret","find","__webpack_exports__","puzzle_Puzzle","creator_Creator","solver_Solver","gui_Gui"],"mappings":"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","file":"nonogram.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Nonogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Nonogram\"] = factory();\n\telse\n\t\troot[\"Nonogram\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export {Utility};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {Utility}\r\n * @this Utility\r\n */\r\nconst Utility = class\r\n{\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @param value\r\n\t * @returns {array}\r\n\t */\r\n\tstatic removeFromArray( array, value )\r\n\t{\r\n\t\tconst index = array.indexOf( value );\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tarray.splice( index, 1 );\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param length\r\n\t * @returns {array}\r\n\t */\r\n\tstatic getZeroFilledArray( length )\r\n\t{\r\n\t\treturn new Array( length ).fill( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @returns {array}\r\n\t */\r\n\tstatic cloneArray( array )\r\n\t{\r\n\t\treturn array.slice( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param min\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\tstatic getRandomIntBetween( min, max )\r\n\t{\r\n\t\tlet minCeil  = Math.ceil( min ),\r\n\t\t\tmaxFloor = Math.floor( max )\r\n\t\t;\r\n\r\n\t\treturn Math.floor( Math.random() * (maxFloor - minCeil + 1) ) + minCeil;\r\n\t}\r\n\r\n};\r\n\r\n\r\n","import {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Puzzle};\r\n\r\n/**\r\n * @class\r\n * @type {Puzzle}\r\n * @this Puzzle\r\n *\r\n * the main puzzle class containing the grid of cells, row/column hints, etc.\r\n *\r\n * @property {number} width\r\n * @property {number} height\r\n * @property {number} totalCells\r\n * @property {array} cells\r\n * @property {array} rowHints\r\n * @property {array} columnHints\r\n * @property {Creator|null} creator\r\n * @property {array} grid - a multi-dimensional array representing rows and columns.\r\n *                   for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n */\r\nconst Puzzle = class\r\n{\r\n\t/**\r\n\t * @param {number} width - an integer >= 1 specifying the number of rows\r\n\t * @param {number} height - an integer >= 1 specifying the number of columns\r\n\t * @throws - error if width or height are invalid\r\n\t */\r\n\tconstructor( width, height )\r\n\t{\r\n\t\tif (typeof width === 'undefined' || typeof height === 'undefined') {\r\n\r\n\t\t\tthrow('width and height are required constructor parameters.');\r\n\r\n\t\t} else if ((width <= 0 || height <= 0) || (width === 1 && height === 1)) {\r\n\r\n\t\t\tthrow('invalid dimensions: ' + width.toString() + ' x ' + height.toString());\r\n\t\t}\r\n\r\n\t\tthis.width      = typeof width === 'number' ? width : parseInt( width.toString(), 10 );\r\n\t\tthis.height     = typeof height === 'number' ? height : parseInt( height.toString(), 10 );\r\n\t\tthis.totalCells = this.width * this.height;\r\n\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * empty all arrays and create zero-filled multidimensional grid array\r\n\t */\r\n\treset()\r\n\t{\r\n\t\tconst zeroFill = Utility.getZeroFilledArray;\r\n\r\n\t\tthis.creator     = null;\r\n\t\tthis.cells       = [];\r\n\t\tthis.rowHints    = [];\r\n\t\tthis.columnHints = [];\r\n\t\tthis.grid        = zeroFill( this.height ).map( () =>\r\n\t\t{\r\n\t\t\treturn zeroFill( this.width );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tcheckUserSolution()\r\n\t{\r\n\t\treturn this.cells.every( ( cell ) =>\r\n\t\t{\r\n\t\t\t// cell.solution will be 0 or 1, but cell.userSolution might be null, 0 or 1\r\n\t\t\tconst userValue = cell.userSolution === 1 ? 1 : 0;\r\n\r\n\t\t\treturn cell.solution === userValue;\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} row\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetRowCells( row )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet start   = row * this.width,\r\n\t\t\tend     = start + this.width,\r\n\t\t\ti\r\n\t\t;\r\n\r\n\t\tfor (i = start; i < end; i++) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} column\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetColumnCells( column )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet i;\r\n\r\n\t\tfor (i = column; i < this.cells.length; i += this.width) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number|string} index\r\n\t * @returns {object|boolean}\r\n\t */\r\n\tgetCellByIndex( index )\r\n\t{\r\n\t\tconst indexInt = typeof index !== 'number' ? parseInt( index, 10 ) : index;\r\n\r\n\t\treturn this.cells[indexInt] ? this.cells[indexInt] : false;\r\n\t}\r\n\r\n};\r\n\r\n","export {PuzzleCell};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleCell}\r\n * @this PuzzleCell\r\n *\r\n * a container representing a single cell in the puzzle grid\r\n *\r\n * @property {number} index\r\n * @property {number} column\r\n * @property {number} row\r\n * @property {*} solution - null, 0, or 1\r\n * @property {*} userSolution - null, 0, or 1\r\n * @property {*} aiSolution - null, 0, or 1\r\n */\r\nconst PuzzleCell = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.index        = -1;\r\n\t\tthis.column       = -1;\r\n\t\tthis.row          = -1;\r\n\t\tthis.solution     = null;\r\n\t\tthis.userSolution = null;\r\n\t\tthis.aiSolution   = null;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n","export {PuzzleLine};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleLine}\r\n * @this PuzzleLine\r\n *\r\n * a container representing a complete row or column of grid cells\r\n *\r\n * @property {string} type - either 'row' or 'column'\r\n * @property {number} index - the column or row index\r\n * @property {number} length\r\n * @property {number} minimumSectionLength\r\n * @property {array} sections\r\n * @property {array} cells\r\n * @property {boolean} solved\r\n */\r\nconst PuzzleLine = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.type                 = '';\r\n\t\tthis.index                = -1;\r\n\t\tthis.length               = 0;\r\n\t\tthis.minimumSectionLength = 0;\r\n\t\tthis.sections             = [];\r\n\t\tthis.cells                = [];\r\n\t\tthis.solved               = false;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n","import {PuzzleLine} from '../src/puzzle-line.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Solver};\r\n\r\n/**\r\n * @class\r\n * @type {Solver}\r\n * @this Solver\r\n *\r\n * a class that solves nonogram puzzles using logical techniques a human might use\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {number} elapsedTime\r\n * @property {boolean} isReset\r\n * @property {array} lines\r\n * @property {array} solutionLog\r\n */\r\nconst Solver = class\r\n{\r\n\r\n\t/**\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tconstructor( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tthis._reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tsolve()\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet lastProgress = -1,\r\n\t\t\tpass         = 1,\r\n\t\t\tsolved, passStart, passEnd, end, passElapsedTime, totalElapsedTime, lineKey, line\r\n\t\t;\r\n\r\n\t\tif (!this.isReset) {\r\n\t\t\tthis._reset();\r\n\t\t}\r\n\r\n\t\tthis.isReset = false;\r\n\t\tthis._log( 'Starting solve algorithm', 'info' );\r\n\r\n\r\n\t\twhile (this._getProgress() > lastProgress && this._getTotalSolved() < this.puzzle.cells.length) {\r\n\r\n\t\t\tpassStart    = new Date().getTime();\r\n\t\t\tlastProgress = this._getProgress();\r\n\r\n\t\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\t\tline = this.lines[lineKey];\r\n\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.eliminateImpossibleFits( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findKnownPositivesAndNegatives( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findSectionDefiningChains( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findAnchoredSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedLines( line );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpassEnd         = new Date().getTime();\r\n\t\t\tpassElapsedTime = (passEnd - passStart) / 1000;\r\n\r\n\t\t\tthis._log( 'Pass ' + pass + ' completed in ' + passElapsedTime + ' seconds :: '\r\n\t\t\t\t+ this._getTotalSolved() + '/' + this.puzzle.cells.length + ' cells solved', 'info'\r\n\t\t\t);\r\n\t\t\tpass++;\r\n\t\t}\r\n\r\n\t\tsolved           = this._getTotalSolved() === this.puzzle.cells.length;\r\n\t\tend              = new Date().getTime();\r\n\t\ttotalElapsedTime = (end - start) / 1000;\r\n\r\n\t\tthis._log( 'Solve algorithm finished in ' + totalElapsedTime + ' seconds.', 'info' );\r\n\r\n\t\tif (solved) {\r\n\t\t\tthis._log( 'Solution Found.', 'success' );\r\n\t\t} else {\r\n\t\t\tthis._log( 'Could not find solution.', 'failure' );\r\n\t\t}\r\n\r\n\t\tthis.elapsedTime = totalElapsedTime;\r\n\r\n\t\treturn solved;\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tsolution algorithms\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\teliminateImpossibleFits( line )\r\n\t{\r\n\t\tlet minimumStartIndex = 0,\r\n\t\t\tmaximumStartIndex = line.length - line.minimumSectionLength,\r\n\t\t\ti, section, possibleStartIndex, newPossibleStartIndexes, lineSectionKey, startIndexKey, testCell, end,\r\n\t\t\tlineCellKey, lineKey\r\n\t\t;\r\n\r\n\r\n\t\t// no sections\r\n\r\n\t\tif (line.sections.length === 0) {\r\n\r\n\t\t\tfor (lineCellKey = 0; lineCellKey < line.cells.length; lineCellKey++) {\r\n\t\t\t\tthis._setCellSolution( line.cells[lineCellKey], 0 );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells start the line\r\n\r\n\t\tfor (lineKey = 0; lineKey < line.length; lineKey++) {\r\n\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tminimumStartIndex++;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells end the line\r\n\r\n\t\tfor (lineKey = line.length - 1; lineKey >= 0; lineKey--) {\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tmaximumStartIndex--;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tfor (lineSectionKey = 0; lineSectionKey < line.sections.length; lineSectionKey++) {\r\n\r\n\t\t\tsection                 = line.sections[lineSectionKey];\r\n\t\t\tnewPossibleStartIndexes = Utility.cloneArray( section.possibleStartIndexes );\r\n\r\n\t\t\t// eliminate places where section does not fit\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\r\n\t\t\t\ttestCell = line.cells[possibleStartIndex + section.length];\r\n\r\n\t\t\t\t// the total length of all sections including minimum gap(s) of one cell does not allow this section to fit:\r\n\r\n\t\t\t\tif (possibleStartIndex < minimumStartIndex || possibleStartIndex > maximumStartIndex) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known positive cell immediately following the possible section placement, so section cannot start here\r\n\r\n\t\t\t\tif (testCell && testCell.aiSolution === 1) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known impossible cell in this range, so section cannot fit here:\r\n\r\n\t\t\t\tend = possibleStartIndex + section.length - 1;\r\n\t\t\t\tend = (end > line.length - 1) ? line.length - 1 : end;\r\n\r\n\t\t\t\tfor (i = possibleStartIndex; i <= end; i++) {\r\n\t\t\t\t\tif (i > line.length - 1 || line.cells[i].aiSolution === 0) {\r\n\t\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tminimumStartIndex += section.length + 1;\r\n\t\t\tmaximumStartIndex += section.length + 1;\r\n\r\n\t\t\tsection.possibleStartIndexes = newPossibleStartIndexes;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindKnownPositivesAndNegatives( line )\r\n\t{\r\n\t\tconst totalCellCounts = Utility.getZeroFilledArray( line.length );\r\n\t\tlet sectionKey, section, cellCounts, startIndexKey, possibleStartIndex, start, end, i, cellCountKey, cellCount,\r\n\t\t\tcell;\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection    = line.sections[sectionKey];\r\n\t\t\tcellCounts = Utility.getZeroFilledArray( line.length );\r\n\r\n\t\t\t// keep two counts: 1) all common cells for this section, and 2) cells where no section can be\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\t\t\t\tstart              = possibleStartIndex;\r\n\t\t\t\tend                = start + section.length - 1;\r\n\r\n\t\t\t\tfor (i = start; i <= end; i++) {\r\n\t\t\t\t\tcellCounts[i]++;\r\n\t\t\t\t\ttotalCellCounts[i]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// common to all possibilities, solve as positive\r\n\r\n\t\t\tfor (cellCountKey = 0; cellCountKey < cellCounts.length; cellCountKey++) {\r\n\r\n\t\t\t\tcellCount = cellCounts[cellCountKey];\r\n\t\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\t\tif (cell && cell.aiSolution === null && cellCount === section.possibleStartIndexes.length) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no possible cells, remove as a possibility\r\n\r\n\t\tfor (cellCountKey = 0; cellCountKey < totalCellCounts.length; cellCountKey++) {\r\n\r\n\t\t\tcellCount = totalCellCounts[cellCountKey];\r\n\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\tif (cell && cell.aiSolution === null && cellCount === 0) {\r\n\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindAnchoredSections( line )\r\n\t{\r\n\t\tlet i, fillRange, firstSection, lastSection;\r\n\r\n\r\n\t\tif (line.sections.length > 0) {\r\n\r\n\t\t\tfirstSection = line.sections[0];\r\n\t\t\tlastSection  = line.sections[line.sections.length - 1];\r\n\r\n\t\t\t// find sections anchored to start of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = 0; i < line.cells.length; i++) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i, i + firstSection.length - 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[i], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find sections anchored to end of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = line.cells.length - 1; i >= 0; i--) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i - lastSection.length + 1, i];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[fillRange[0] - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[fillRange[0] - 1], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindSectionDefiningChains( line )\r\n\t{\r\n\t\tlet chains    = [],\r\n\t\t\tlastValue = 0,\r\n\t\t\tcellKey, cell, chain, chainKey, sectionsSorted, firstSortedSection\r\n\t\t;\r\n\r\n\r\n\t\t// sort sections by highest length to lowest\r\n\r\n\t\tsectionsSorted     = Utility.cloneArray( line.sections ).sort( function ( a, b )\r\n\t\t{\r\n\t\t\treturn a.length > b.length ? -1 : 1;\r\n\t\t} );\r\n\t\tfirstSortedSection = sectionsSorted[0];\r\n\r\n\r\n\t\t// loop through all cells, creating array of connectors\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\tif (cell.aiSolution === 1) {\r\n\r\n\t\t\t\tif (lastValue !== 1) {\r\n\t\t\t\t\tchain = {\r\n\t\t\t\t\t\tstart:  cellKey,\r\n\t\t\t\t\t\tlength: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t\tchains.push( chain );\r\n\t\t\t\t} else if (chain) {\r\n\t\t\t\t\tchain.length++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlastValue = cell.aiSolution;\r\n\t\t}\r\n\r\n\r\n\t\t// if a connector is found with the first section's length, place negatives around it and mark the section as complete & continue\r\n\r\n\t\tfor (chainKey = 0; chainKey < chains.length; chainKey++) {\r\n\r\n\t\t\tchain = chains[chainKey];\r\n\r\n\t\t\tif (chain.length === firstSortedSection.length) {\r\n\r\n\t\t\t\tif (line.cells[chain.start - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start - 1], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (line.cells[chain.start + firstSortedSection.length]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start + firstSortedSection.length], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfirstSortedSection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedSections( line )\r\n\t{\r\n\t\tlet sectionKey, section, firstNegative, lastNegative;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\r\n\r\n\t\t\t// only one possible place...\r\n\r\n\t\t\tif (!section.solved && section.possibleStartIndexes.length === 1) {\r\n\r\n\t\t\t\t// make sure there is a negative cell on either side of the section\r\n\r\n\t\t\t\tfirstNegative = section.possibleStartIndexes[0] - 1;\r\n\t\t\t\tlastNegative  = section.possibleStartIndexes[0] + section.length;\r\n\r\n\t\t\t\tif (line.cells[firstNegative] && line.cells[firstNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[firstNegative], 0 );\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[lastNegative] && line.cells[lastNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[lastNegative], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedLines( line )\r\n\t{\r\n\t\tlet totalSectionLength  = 0,\r\n\t\t\ttotalPositiveSolved = 0,\r\n\t\t\tsectionKey, section, cellKey, cell\r\n\t\t;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\t\t\ttotalSectionLength += section.length;\r\n\t\t}\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\t\t\ttotalPositiveSolved += cell.aiSolution === 1;\r\n\t\t}\r\n\r\n\t\tif (totalSectionLength === totalPositiveSolved) {\r\n\r\n\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\tif (cell.aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tconst possibleRowIndexes    = [],\r\n\t\t\t  possibleColumnIndexes = []\r\n\t\t;\r\n\t\tlet i, cellKey, rowNumber, rowHints, rowCells, line, index, len, columnKey, columnHint;\r\n\r\n\t\tthis.isReset     = true;\r\n\t\tthis.elapsedTime = 0;\r\n\t\tthis.solutionLog = [];\r\n\t\tthis.lines       = [];\r\n\r\n\t\tthis._log( 'Resetting variables', 'info' );\r\n\r\n\t\t// reset cell.aiSolution\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\tthis.puzzle.cells[cellKey].aiSolution = null;\r\n\t\t}\r\n\r\n\t\t// reset possibleRowIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.width; i++) {\r\n\t\t\tpossibleRowIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset possibleColumnIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.height; i++) {\r\n\t\t\tpossibleColumnIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset rowHints\r\n\r\n\t\tfor (rowNumber = 0; rowNumber < this.puzzle.rowHints.length; rowNumber++) {\r\n\r\n\t\t\trowHints = this.puzzle.rowHints[rowNumber];\r\n\t\t\trowCells = this.puzzle.getRowCells( rowNumber );\r\n\r\n\t\t\tif (rowCells) {\r\n\r\n\t\t\t\tline = new PuzzleLine( {\r\n\t\t\t\t\ttype:   'row',\r\n\t\t\t\t\tindex:  rowNumber,\r\n\t\t\t\t\tlength: this.puzzle.width,\r\n\t\t\t\t\tcells:  rowCells\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tfor (index = 0; index < rowHints.length; index++) {\r\n\r\n\t\t\t\t\tlen = rowHints[index];\r\n\t\t\t\t\tline.sections.push( {\r\n\t\t\t\t\t\tindex:                index,\r\n\t\t\t\t\t\tlength:               len,\r\n\t\t\t\t\t\tpossibleStartIndexes: possibleRowIndexes,\r\n\t\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\t\tsolved:               false\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\t\tthis.lines.push( line );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset columnHints\r\n\r\n\t\tfor (columnKey = 0; columnKey < this.puzzle.columnHints.length; columnKey++) {\r\n\r\n\t\t\tcolumnHint = this.puzzle.columnHints[columnKey];\r\n\t\t\tline       = new PuzzleLine( {\r\n\t\t\t\ttype:   'column',\r\n\t\t\t\tindex:  columnKey,\r\n\t\t\t\tlength: this.puzzle.height,\r\n\t\t\t\tcells:  this.puzzle.getColumnCells( columnKey ),\r\n\t\t\t} );\r\n\r\n\t\t\tfor (index = 0; index < columnHint.length; index++) {\r\n\t\t\t\tlen = columnHint[index];\r\n\t\t\t\tline.sections.push( {\r\n\t\t\t\t\tindex:                index,\r\n\t\t\t\t\tlength:               len,\r\n\t\t\t\t\tpossibleStartIndexes: possibleColumnIndexes,\r\n\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\tsolved:               false\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t}\r\n\r\n\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\tthis.lines.push( line );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleCell} puzzleCell\r\n\t * @param {number} value\r\n\t * @private\r\n\t */\r\n\t_setCellSolution( puzzleCell, value )\r\n\t{\r\n\t\tlet lineKey, line, isRow, isCol, cellsSolved, cellKey, cell;\r\n\r\n\t\tif (puzzleCell.aiSolution !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline        = this.lines[lineKey];\r\n\t\t\tisRow       = line.type === 'row' && line.index === puzzleCell.row;\r\n\t\t\tisCol       = line.type === 'column' && line.index === puzzleCell.column;\r\n\t\t\tcellsSolved = 0;\r\n\r\n\t\t\tif (isRow || isCol) {\r\n\r\n\t\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\t\tif (cell.index === puzzleCell.index) {\r\n\t\t\t\t\t\tcell.aiSolution = value;\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t} else if (cell.aiSolution !== null) {\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cellsSolved === line.length) {\r\n\t\t\t\t\tline.solved = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param html\r\n\t * @param cssClass\r\n\t * @private\r\n\t */\r\n\t_log( html, cssClass )\r\n\t{\r\n\t\tthis.solutionLog.push( {\r\n\t\t\thtml:     html,\r\n\t\t\tcssClass: cssClass || 'info'\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getTotalSolved()\r\n\t{\r\n\t\tlet total = 0,\r\n\t\t\tcellKey\r\n\t\t;\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\ttotal += this.puzzle.cells[cellKey].aiSolution !== null;\r\n\t\t}\r\n\r\n\t\treturn total;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * calculate the maximum # of possible permutations, depending on the current state of the solving process.\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getProgress()\r\n\t{\r\n\t\tlet maxPossibilities   = 0,\r\n\t\t\ttotalPossibilities = 0,\r\n\t\t\tlineKey, line, sectionKey\r\n\t\t;\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline = this.lines[lineKey];\r\n\t\t\tmaxPossibilities += line.sections.length * (line.type === 'row' ? this.puzzle.width : this.puzzle.height);\r\n\r\n\t\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\t\t\t\ttotalPossibilities += line.sections[sectionKey].possibleStartIndexes.length;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxPossibilities - totalPossibilities;\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Puzzle} from '../src/puzzle.js';\r\nimport {PuzzleCell} from '../src/puzzle-cell.js';\r\nimport {Solver} from '../src/solver.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Creator};\r\n\r\n/**\r\n * @class\r\n * @type {Creator}\r\n * @this Creator\r\n *\r\n * creates nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {array} log\r\n * @property {number} creationTime\r\n * @property {number} solvingTime\r\n */\r\nconst Creator = class\r\n{\r\n\r\n\r\n\t// ######################################################################################\tpublic methods\r\n\r\n\t/**\r\n\t * populates the puzzles rows and columns with random, solvable values\r\n\t *\r\n\t * @param {number} width\r\n\t * @param {number} height\r\n\t * @param {number|null} density - a floating point number between 0 and 1 (optional) that controls the percentage of filled cell likelihood.\r\n\t *                                    If not supplied a random value between 0.2 and 0.8 will be generated.\r\n\t *                                    Note that this does not make a puzzle grid filled in by the percentage,\r\n\t *                                    rather it's a 'suggestion' that is run through randomization on a cell-by-cell basis.\r\n\t * @returns {Puzzle|Puzzle|class}\r\n\t */\r\n\tcreateRandom( width, height, density )\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet puzzleValid  = false,\r\n\t\t\tdensityValid = typeof density === 'number' && density >= 0 && density <= 1,\r\n\t\t\tcellsFilled, chanceOfCellFill, solutionGrid, rowArray, cellValue, solver, i, elapsed\r\n\t\t;\r\n\r\n\r\n\t\tthis.puzzle = new Puzzle( width, height );\r\n\t\tthis._reset();\r\n\r\n\r\n\t\twhile (puzzleValid === false) {\r\n\r\n\t\t\tchanceOfCellFill = densityValid ? density : Utility.getRandomIntBetween( 200, 800 ) / 1000;\r\n\t\t\tsolutionGrid     = [];\r\n\t\t\trowArray         = [];\r\n\t\t\tcellsFilled      = 0;\r\n\r\n\t\t\tthis._log( 'Creating random ' +\r\n\t\t\t\tthis.puzzle.width + 'x' + this.puzzle.height +\r\n\t\t\t\t' puzzle with density of ' + chanceOfCellFill + '...'\r\n\t\t\t);\r\n\r\n\t\t\t// create puzzle grid randomly using density as a factor\r\n\r\n\t\t\tfor (i = 0; i < this.puzzle.totalCells; i++) {\r\n\r\n\t\t\t\tcellValue = Math.random() < chanceOfCellFill ? 1 : 0;\r\n\r\n\t\t\t\tcellsFilled += cellValue;\r\n\r\n\t\t\t\tif (i % this.puzzle.width === 0 && i > 0) {\r\n\t\t\t\t\tsolutionGrid.push( rowArray );\r\n\t\t\t\t\trowArray = [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\trowArray.push( cellValue );\r\n\t\t\t}\r\n\r\n\t\t\t// ensure that at least one cell is filled, and that not all of them are\r\n\r\n\t\t\tif (cellsFilled === 0) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has no cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t} else if (cellsFilled === this.puzzle.totalCells) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has all cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// populate the solution grid\r\n\t\t\tsolutionGrid.push( rowArray );\r\n\r\n\t\t\t// populate the grid\r\n\t\t\tthis.puzzle = Creator._populatePuzzleFromGrid( this.puzzle, solutionGrid );\r\n\r\n\r\n\t\t\t// ensure that puzzle is solvable\r\n\t\t\tsolver = new Solver( this.puzzle );\r\n\r\n\t\t\tif (solver.solve()) {\r\n\r\n\t\t\t\tpuzzleValid = true;\r\n\t\t\t\telapsed     = (new Date().getTime() - start) / 1000;\r\n\r\n\t\t\t\tthis._log( 'Puzzle is solvable - solved in ' + solver.elapsedTime + ' seconds' );\r\n\t\t\t\tthis._logLine();\r\n\t\t\t\tthis._log( 'Puzzle generated in ' + elapsed + ' seconds.' );\r\n\r\n\t\t\t\tthis.creationTime = elapsed;\r\n\t\t\t\tthis.solvingTime  = solver.elapsedTime;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._log( 'Puzzle cannot be solved.  Trying again...' );\r\n\t\t\t}\r\n\r\n\t\t\tthis._logLine();\r\n\t\t}\r\n\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle using a grid\r\n\t *\r\n\t * @param {array} grid - a multi-dimensional array representing rows and columns.\r\n\t *                         for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n\t * @throws - error if grid is invalid\r\n\t */\r\n\tcreateFromGrid( grid )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width   = 0,\r\n\t\t\theight  = 0,\r\n\t\t\tpuzzle, solver, elapsed\r\n\t\t;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from grid array.' );\r\n\r\n\t\t// make sure grid is valid and get width & height\r\n\t\tif (!(grid instanceof Array)) {\r\n\t\t\tthrow 'grid is not an array';\r\n\t\t}\r\n\r\n\r\n\t\tgrid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\tif (!(row instanceof Array)) {\r\n\t\t\t\tthrow 'grid is not a multi-dimensional array';\r\n\t\t\t}\r\n\r\n\t\t\tif (width === 0) {\r\n\t\t\t\twidth = row.length;\r\n\t\t\t} else if (row.length !== width) {\r\n\t\t\t\tthrow 'row ' + rowKey + ' has an invalid length (' + row.length + ') - expecting ' + width;\r\n\t\t\t}\r\n\r\n\t\t\theight++;\r\n\t\t} );\r\n\r\n\t\tthis._log( 'grid is valid' );\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\t\tpuzzle = new Puzzle( width, height );\r\n\r\n\t\tthis.puzzle         = Creator._populatePuzzleFromGrid( puzzle, grid );\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle from a hint object\r\n\t *\r\n\t * @param {object} hints - structured like this:  {\r\n\t * \t\t\t\t\t\t\t\t\trow: [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t\t\t\t\t\t\t\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t * @param {array} hints.row\r\n\t * @param {array} hints.column\r\n\t * @throws - error if hints object is structured incorrectly\r\n\t */\r\n\tcreateFromHints( hints )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width, height, puzzle, solver, elapsed;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from hints' );\r\n\r\n\t\t// make sure row & column properties exist\r\n\r\n\t\tif (typeof hints !== 'object' || !hints.row || !hints.column) {\r\n\r\n\t\t\tthrow 'parameter passed to createFromHints() must be an object containing \"row\" and \"column\" properties';\r\n\r\n\t\t} else if (!(hints.row instanceof Array) || !(hints.column instanceof Array)) {\r\n\r\n\t\t\tthrow 'hints.row or hints.column must be an array.';\r\n\t\t}\r\n\t\tthis._log( 'found row and column hints' );\r\n\r\n\t\twidth              = hints.column.length;\r\n\t\theight             = hints.row.length;\r\n\t\tpuzzle             = new Puzzle( width, height );\r\n\t\tpuzzle.rowHints    = hints.row;\r\n\t\tpuzzle.columnHints = hints.column;\r\n\t\tpuzzle.creator     = this;\r\n\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\r\n\t\t// populate cells array\r\n\r\n\t\tpuzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\trow.forEach( ( column, columnKey ) =>\r\n\t\t\t{\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:  (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn: columnKey,\r\n\t\t\t\t\trow:    rowKey\r\n\t\t\t\t} ) );\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// set solution on puzzle cells\r\n\r\n\t\tsolver.puzzle.cells.forEach( ( solvedCell, cellIndex ) =>\r\n\t\t{\r\n\t\t\tconst puzzleCell = this.puzzle.getCellByIndex( cellIndex );\r\n\r\n\t\t\tpuzzleCell.aiSolution = solvedCell.aiSolution;\r\n\t\t\tpuzzleCell.solution   = solvedCell.aiSolution;\r\n\t\t} );\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t * @param {array} grid - a multidimensional array\r\n\t * @returns {Puzzle} puzzle\r\n\t * @private\r\n\t */\r\n\tstatic _populatePuzzleFromGrid( puzzle, grid )\r\n\t{\r\n\t\tlet columnHints, rowKey, row, columnKey, column, cell, currentVal, lastVal, rowHints, hintKey, hint;\r\n\r\n\t\tpuzzle.reset();\r\n\r\n\t\tpuzzle.grid = grid;\r\n\r\n\r\n\t\tfor (rowKey = 0; rowKey < puzzle.grid.length; rowKey++) {\r\n\r\n\t\t\trow      = puzzle.grid[rowKey];\r\n\t\t\trowHints = [];\r\n\r\n\t\t\tpuzzle.rowHints[rowKey] = [];\r\n\r\n\t\t\tfor (columnKey = 0; columnKey < row.length; columnKey++) {\r\n\r\n\t\t\t\tcolumn     = row[columnKey];\r\n\t\t\t\tcurrentVal = column;\r\n\t\t\t\tlastVal    = columnKey > 0 ? puzzle.grid[rowKey][columnKey - 1] : 0;\r\n\r\n\t\t\t\t// populate cells\r\n\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:    (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn:   columnKey,\r\n\t\t\t\t\trow:      rowKey,\r\n\t\t\t\t\tsolution: column\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t\t// populate row hints\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\trowHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\trowHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\trowHints[rowHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up row hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < rowHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = rowHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.rowHints[rowKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// populate column hints\r\n\r\n\t\tfor (columnKey = 0; columnKey < puzzle.width; columnKey++) {\r\n\r\n\t\t\tpuzzle.columnHints[columnKey] = [];\r\n\t\t\tcolumnHints                   = [];\r\n\r\n\t\t\tfor (cell = columnKey; cell < puzzle.totalCells; cell += puzzle.width) {\r\n\r\n\t\t\t\trow        = Math.floor( cell / puzzle.width );\r\n\t\t\t\tcurrentVal = puzzle.grid[row][columnKey];\r\n\t\t\t\tlastVal    = row > 0 ? puzzle.grid[row - 1][columnKey] : 0;\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\tcolumnHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints[columnHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up column hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < columnHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = columnHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.columnHints[columnKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param msg\r\n\t * @private\r\n\t */\r\n\t_log( msg )\r\n\t{\r\n\t\tthis.log.push( msg );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_logLine()\r\n\t{\r\n\t\tthis.log.push( '-----------------------------------' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tthis.log          = [];\r\n\t\tthis.creationTime = 0;\r\n\t\tthis.solvingTime  = 0;\r\n\t}\r\n\r\n};\r\n\r\n","export {GuiTemplate};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {GuiTemplate}\r\n * @this GuiTemplate\r\n *\r\n * @property {string} name\r\n * @property {string} path\r\n * @property {string} html\r\n * @property {array} loadedCallbacks\r\n * @property {Promise} loadedPromise - resolves once template has been onLoad and parsed\r\n * @property {boolean} isLoaded\r\n */\r\nconst GuiTemplate = class\r\n{\r\n\t/**\r\n\t * class for loading an html template\r\n\t *\r\n\t * @param name\r\n\t * @param path\r\n\t */\r\n\tconstructor( name, path )\r\n\t{\r\n\t\tthis.name              = name;\r\n\t\tthis.path              = path;\r\n\t\tthis.html              = '';\r\n\t\tthis.onLoadedCallbacks = [];\r\n\t\tthis.isLoaded          = false;\r\n\t\tthis.loadedPromise     = null;\r\n\t}\r\n\r\n\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * attach a callback to fire once template has loaded\r\n\t *\r\n\t * @param {function} callback\r\n\t */\r\n\tonLoad( callback )\r\n\t{\r\n\t\tthis.onLoadedCallbacks.push( callback );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * fired when template is loaded.  executes all onLoad callbacks\r\n\t */\r\n\tfireOnLoaded()\r\n\t{\r\n\t\tthis.onLoadedCallbacks.forEach( ( callback ) =>\r\n\t\t{\r\n\t\t\tcallback();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * attempts to fetch a template specified by this.path\r\n\t *\r\n\t * @returns {Promise} - complete when template has been fetched and parsed\r\n\t * @throws - error if template cannot be onLoad\r\n\t */\r\n\tload()\r\n\t{\r\n\t\tthis.loadedPromise = new Promise( ( resolve ) =>\r\n\t\t{\r\n\t\t\tfetch( this.path ).then( ( response ) =>\r\n\t\t\t{\r\n\t\t\t\tif (response.ok) {\r\n\r\n\t\t\t\t\tresponse.text().then( ( text ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.html     = text;\r\n\t\t\t\t\t\tthis.isLoaded = true;\r\n\t\t\t\t\t\tthis.fireOnLoaded();\r\n\r\n\t\t\t\t\t\tresolve( this.name + ' onLoad and parsed' );\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow 'loading failed for \"' + this.path + '\"';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\treturn this.loadedPromise;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * get the html template as a DOM node\r\n\t * @returns {HTMLDivElement}\r\n\t */\r\n\tgetNode()\r\n\t{\r\n\t\tconst div = document.createElement( 'div' );\r\n\r\n\t\tdiv.innerHTML = this.html;\r\n\r\n\t\treturn div;\r\n\t}\r\n\r\n};\r\n","export {PuzzleLibrary};\r\n\r\n\r\n/**\r\n *\r\n * @type {{'Large Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Medium Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 1': {solutionGrid: *[], width: number, height: number}, 'Medium Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 3': {hints: {column: *[], row: *[]}, width: number, height: number}}}\r\n */\r\nconst PuzzleLibrary = {\r\n\r\n\t\"Small Example 1\": {\r\n\t\twidth:        8,\r\n\t\theight:       8,\r\n\t\tsolutionGrid: [\r\n\t\t\t[0, 0, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 1, 0, 0, 0, 1],\r\n\t\t\t[1, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 0, 0, 0, 1, 1, 1, 0]\r\n\t\t]\r\n\t},\r\n\r\n\t\"Small Example 2\": {\r\n\t\twidth:  8,\r\n\t\theight: 8,\r\n\t\thints:  {\r\n\t\t\trow:    [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Small Example 3\": {\r\n\t\twidth:  10,\r\n\t\theight: 10,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[3], [1, 1], [1], [6], [8], [2, 1], [4, 1], [10], [3, 1], [3]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4], [5], [2, 3], [2, 3], [2, 1], [2, 1], [2, 1], [10], [1, 1, 1], [2, 1, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Medium Example 1\": {\r\n\t\twidth:  16,\r\n\t\theight: 18,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[5], [4, 3, 3], [7, 6, 2], [4, 3, 4, 1], [3, 2, 4, 1, 2], [2, 6, 4], [3, 3, 1, 1], [4, 6, 4], [6, 4, 1, 1], [4, 3, 4, 1], [7, 6, 2], [4, 3, 3], [5], [3], [5, 3, 3], [2, 4, 1, 2]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[5], [9], [3, 5], [3, 5, 1], [4, 4, 2], [2, 1, 1, 2, 1], [2, 2, 1], [2, 3, 2, 1], [7, 2], [9, 1], [2, 2, 2, 2, 2], [3, 2, 2, 3, 2], [4, 1, 1, 6], [1, 2, 2, 2], [16], [2, 1, 1, 1, 1, 2, 1], [2, 2, 2, 2, 2], [9, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t\"Medium Example 2\": {\r\n\t\twidth:  15,\r\n\t\theight: 15,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[4], [3, 1], [2, 3], [1, 2, 2], [1, 2, 1], [1, 1, 1, 1], [4, 3, 3], [2, 2, 4, 3], [1, 2, 5, 1], [1, 2, 4, 1], [1, 2, 5, 1], [2, 2, 4, 3], [9, 3], [5, 1, 1], [6, 1]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4, 5], [3, 2, 2], [2, 1, 1], [1, 4, 3], [2, 9], [2, 8], [2, 3], [12], [1, 7, 1], [9], [5], [1, 1], [2, 2], [3, 3], [1, 7, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Large Example 1\": {\r\n\t\twidth:  30,\r\n\t\theight: 30,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[19, 9], [13, 1, 2, 1, 5], [11, 4, 1, 1, 2, 3], [10, 6, 1, 4, 1, 1], [9, 7, 1, 1, 3, 2], [3, 4, 11, 1, 6], [2, 1, 2, 3, 3, 3, 7], [2, 2, 1, 2, 4, 3, 8], [3, 2, 2, 1, 2, 6, 7], [1, 3, 3, 4, 1, 4, 4, 1], [5, 4, 2, 5, 2, 2], [1, 3, 11, 1, 2, 4], [3, 2, 14, 5], [2, 2, 1, 14, 7], [1, 2, 2, 2, 10, 2], [2, 1, 3, 2, 6, 3, 3], [5, 6, 6, 2, 2, 4], [6, 4, 4, 3, 3, 3], [6, 3, 2, 1, 1, 3, 5, 2], [6, 1, 2, 2, 2, 2, 2, 3], [7, 1, 9, 2, 4], [7, 3, 1, 2, 2, 3], [8, 2, 5, 4, 3], [6, 1, 7, 11], [5, 1, 3, 2, 12], [5, 2, 2, 2, 3, 11], [4, 5, 4, 3, 10], [3, 14, 10], [3, 3, 5, 2, 9], [4, 3, 3, 10]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[10, 19], [9, 1, 2, 15], [6, 1, 1, 1, 14], [5, 2, 3, 2, 11, 1], [6, 7, 11, 1], [7, 5, 7, 3], [8, 4, 3, 4], [6, 4, 5, 1, 4, 1], [5, 8, 6, 2, 1], [4, 10, 3, 3, 3, 1], [3, 3, 5, 2, 4, 2, 2], [2, 3, 3, 3, 2, 4, 2, 3], [2, 3, 1, 1, 5, 2, 1, 6], [1, 4, 3, 4, 2, 2, 2, 4], [1, 4, 3, 4, 5, 3, 3], [1, 5, 5, 2, 1, 4, 1, 1], [1, 15, 3, 2, 3, 1], [2, 4, 7, 2, 2, 3, 1], [1, 4, 4, 7, 2, 1, 3], [1, 2, 3, 4, 3, 3, 1], [1, 1, 3, 5, 2, 6, 1], [1, 1, 1, 4, 4, 9], [2, 3, 1, 1, 1, 9], [1, 2, 4, 1, 1, 6, 8], [1, 10, 1, 7, 7], [2, 8, 2, 1, 2, 1, 7], [3, 6, 3, 1, 1, 1, 7], [4, 4, 4, 3, 11], [3, 5, 20], [2, 7, 19]\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n};\r\n\r\n","import {GuiTemplate} from '../src/gui-template.js';\r\nimport {PuzzleLibrary} from '../src/puzzle-library.js';\r\nimport {Creator} from '../src/creator.js';\r\n\r\n\r\nexport {Gui};\r\n\r\n/**\r\n * @class\r\n * @type {Gui}\r\n * @this Gui\r\n *\r\n * provides a user interface for interacting with nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {HTMLElement} gridContainer - container element for the puzzle grid ui\r\n * @property {array} templates - array of GuiTemplate objects\r\n * @property {array} templatesLoaded - array of Promises from each onLoad template\r\n * @property {string|null} theme - the theme to use, located in the themes/ directory\r\n * @property {string} themePath - the path to the specified theme located in themes/{theme}\r\n * @property {string} themeStylesheetPath - the path to the theme stylesheet located in themes/{theme}/styles.css\r\n * @property {string} themeTemplatesPath - the path to the theme template directory located in themes/{theme}/templates\r\n * @property {int} playerClickMode - whether to fill or cross a cell on click\r\n */\r\nconst Gui = class\r\n{\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string|null} themePath - the path to the theme directory.  Defaults to ./themes/default\r\n\t */\r\n\tconstructor( themePath )\r\n\t{\r\n\t\tconst head = document.querySelector( 'head' ),\r\n\t\t\t  link = document.createElement( 'link' )\r\n\t\t;\r\n\r\n\t\t// set up board sizes\r\n\t\tthis.boardSizes = [\r\n\t\t\t{ name: 'Tiny', handle: 'tiny', size: 1 },\r\n\t\t\t{ name: 'Small', handle: 'small', size: 2 },\r\n\t\t\t{ name: 'Medium', handle: 'medium', size: 3 },\r\n\t\t\t{ name: 'Large', handle: 'large', size: 4 },\r\n\t\t];\r\n\t\tthis.boardSize  = this.boardSizes[2];\r\n\r\n\t\t// set up theme\r\n\t\tthis.themePath = themePath || './themes/default';\r\n\r\n\t\t// load theme stylesheet\r\n\t\tthis.themeStylesheetPath = this.themePath + '/styles.css';\r\n\t\tlink.rel                 = 'stylesheet';\r\n\t\tlink.type                = 'text/css';\r\n\t\tlink.href                = this.themeStylesheetPath;\r\n\t\thead.prepend( link );\r\n\r\n\t\t// set up templates\r\n\t\tthis.templatesLoaded    = [];\r\n\t\tthis.themeTemplatesPath = this.themePath + '/templates';\r\n\t\tthis.templates          = [\r\n\t\t\tnew GuiTemplate( 'gameControls', this.themeTemplatesPath + '/controls-game.html' ),\r\n\t\t\tnew GuiTemplate( 'generateControls', this.themeTemplatesPath + '/controls-generate.html' ),\r\n\t\t\tnew GuiTemplate( 'console', this.themeTemplatesPath + '/console.html' ),\r\n\t\t\tnew GuiTemplate( 'previewGrid', this.themeTemplatesPath + '/preview-grid.html' ),\r\n\t\t\tnew GuiTemplate( 'puzzleGrid', this.themeTemplatesPath + '/puzzle-grid.html' ),\r\n\t\t];\r\n\r\n\t\t// load templates\r\n\t\tthis.templates.forEach( ( template ) =>\r\n\t\t{\r\n\t\t\tthis.templatesLoaded.push(\r\n\t\t\t\ttemplate.load()\r\n\t\t\t);\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tpublic drawing methods\r\n\r\n\t/**\r\n\t * - draw all user interfaces once templates are onLoad\r\n\t */\r\n\tdraw( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tthis.drawGenerateControls();\r\n\t\t\tthis.drawPuzzle( puzzle );\r\n\t\t\tthis.drawGameControls();\r\n\t\t\tthis.drawConsole();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the puzzle ui\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tdrawPuzzle( puzzle )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template = this._getTemplate( 'puzzleGrid' );\r\n\r\n\t\t\tthis.puzzle        = puzzle;\r\n\t\t\tthis.gridContainer = document.querySelector( '[data-nonogram-puzzle-grid]' );\r\n\r\n\r\n\t\t\tif (!this.gridContainer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst container       = this.gridContainer,\r\n\t\t\t\t  node            = template.getNode(),\r\n\t\t\t\t  theadThTemplate = node.querySelector( '[data-nonogram-puzzle-grid-table-thead-th]' ),\r\n\t\t\t\t  rowTemplate     = node.querySelector( '[data-nonogram-puzzle-grid-table-row]' ),\r\n\t\t\t\t  cellClasses     = {\r\n\t\t\t\t\t  tl: 0,\r\n\t\t\t\t\t  tr: this.puzzle.width - 1,\r\n\t\t\t\t\t  bl: (this.puzzle.width * this.puzzle.height) - this.puzzle.width,\r\n\t\t\t\t\t  br: (this.puzzle.width * this.puzzle.height) - 1,\r\n\t\t\t\t  }\r\n\t\t\t;\r\n\r\n\t\t\t// table header\r\n\t\t\tthis.puzzle.columnHints.forEach( ( hints, columnIndex ) =>\r\n\t\t\t{\r\n\t\t\t\tconst clonedTheadThTemplate = document.importNode( theadThTemplate.content, true ),\r\n\t\t\t\t\t  theadTh               = clonedTheadThTemplate.querySelector( 'th' ),\r\n\t\t\t\t\t  fillDiv               = theadTh.querySelector( '.fill' );\r\n\r\n\t\t\t\ttheadTh.setAttribute( 'data-column', columnIndex.toString() );\r\n\t\t\t\ttheadTh.classList.add( 'hint', 'top' );\r\n\r\n\t\t\t\t// add hints\r\n\t\t\t\thints.forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\tfillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\ttheadThTemplate.parentNode.insertBefore( theadTh, theadThTemplate );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// table rows\r\n\r\n\t\t\tthis.puzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cells             = this.puzzle.getRowCells( rowKey ),\r\n\t\t\t\t\t  clonedRowTemplate = document.importNode( rowTemplate.content, true ),\r\n\t\t\t\t\t  tr                = clonedRowTemplate.querySelector( 'tr' ),\r\n\t\t\t\t\t  cellTemplate      = tr.querySelector( '[data-nonogram-puzzle-grid-table-cell]' ),\r\n\t\t\t\t\t  hintsFillDiv      = tr.querySelector( '[data-row-hints] .fill' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\ttr.setAttribute( 'data-row', rowKey.toString() );\r\n\r\n\t\t\t\t// hint cell\r\n\t\t\t\tthis.puzzle.rowHints[rowKey].forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\thintsFillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// grid cells\r\n\t\t\t\tcells.forEach( ( cell ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedCellTemplate = document.importNode( cellTemplate.content, true ),\r\n\t\t\t\t\t\t  td                 = clonedCellTemplate.querySelector( 'td' )\r\n\t\t\t\t\t;\r\n\r\n\t\t\t\t\ttd.setAttribute( 'data-index', cell.index );\r\n\t\t\t\t\ttd.setAttribute( 'data-column', cell.column );\r\n\t\t\t\t\ttd.setAttribute( 'data-row', cell.row );\r\n\t\t\t\t\ttd.classList.add( 'puzzle-cell', 'flippable' );\r\n\r\n\t\t\t\t\tObject.keys( cellClasses ).forEach( ( cssClass ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (cell.index === cellClasses[cssClass]) {\r\n\t\t\t\t\t\t\ttd.classList.add( cssClass );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\ttr.appendChild( td );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\trowTemplate.parentNode.appendChild( tr );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// set board size\r\n\t\t\tdocument.querySelector( '[data-nonogram-puzzle-grid-table]' ).classList.add( this.boardSize.handle );\r\n\r\n\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\tthis._makePuzzlePlayable();\r\n\t\t\tthis.drawPreview( 'userSolution' );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *    - draw the game controls ui\r\n\t */\r\n\tdrawGameControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'gameControls' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-game-controls]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\t\t\tlet fillModeCheckbox;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tfillModeCheckbox = document.querySelector( '#nonogram-puzzle-fill-mode' );\r\n\r\n\t\t\tfillModeCheckbox.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst fillModeLabel = document.querySelector( '[for=\"nonogram-puzzle-fill-mode\"]' ),\r\n\t\t\t\t\t  prevActive    = fillModeLabel.querySelector( '.active' ),\r\n\t\t\t\t\t  prevInactive  = fillModeLabel.querySelector( '.inactive' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\tprevActive.classList.remove( 'active' );\r\n\t\t\t\tprevActive.classList.add( 'inactive' );\r\n\t\t\t\tprevInactive.classList.remove( 'inactive' );\r\n\t\t\t\tprevInactive.classList.add( 'active' );\r\n\r\n\t\t\t\tif (fillModeCheckbox.checked) {\r\n\t\t\t\t\tfillModeLabel.classList.add( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfillModeLabel.classList.remove( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 1;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\twindow.addEventListener( 'keyup', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tif (e.key && e.key === 'x') {\r\n\t\t\t\t\tfillModeCheckbox.dispatchEvent( new MouseEvent( 'click' ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw puzzle generating/solving/resetting ui\r\n\t */\r\n\tdrawGenerateControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template            = this._getTemplate( 'generateControls' ),\r\n\t\t\t\t  container           = document.querySelector( '[data-nonogram-generate-controls]' ),\r\n\t\t\t\t  node                = template.getNode(),\r\n\t\t\t\t  widthSelect         = node.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t  heightSelect        = node.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t  widthOptions        = node.querySelector( '[data-nonogram-generate-width-options]' ),\r\n\t\t\t\t  heightOptions       = node.querySelector( '[data-nonogram-generate-height-options]' ),\r\n\t\t\t\t  chooseExampleSelect = node.querySelector( '[data-nonogram-choose-predefined]' ),\r\n\t\t\t\t  boardSizeSelect     = node.querySelector( '[data-nonogram-board-size]' ),\r\n\t\t\t\t  boardSizeOptions    = node.querySelector( '[data-nonogram-board-size-options]' )\r\n\t\t\t;\r\n\t\t\tlet i, clonedWidthOptions, cloneHeightOptions, widthOption, heightOption, clonedExampleOptions,\r\n\t\t\t\texampleOption, chooseSelect, boardSize, clonedSizeOptions, sizeOption, reset, solve, generate;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// populate width/height select elements\r\n\t\t\tfor (i = 5; i <= 30; i++) {\r\n\r\n\t\t\t\tclonedWidthOptions       = document.importNode( widthOptions.content, true );\r\n\t\t\t\tcloneHeightOptions       = document.importNode( heightOptions.content, true );\r\n\t\t\t\twidthOption              = clonedWidthOptions.querySelector( 'option' );\r\n\t\t\t\twidthOption.textContent  = widthOption.value = i;\r\n\t\t\t\theightOption             = cloneHeightOptions.querySelector( 'option' );\r\n\t\t\t\theightOption.textContent = heightOption.value = i;\r\n\r\n\t\t\t\tif (this.puzzle.width === i) {\r\n\t\t\t\t\twidthOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\t\t\t\tif (this.puzzle.height === i) {\r\n\t\t\t\t\theightOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\twidthSelect.appendChild( widthOption );\r\n\t\t\t\theightSelect.appendChild( heightOption );\r\n\t\t\t}\r\n\r\n\t\t\t// populate predefined puzzles\r\n\r\n\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedExampleOptions = document.importNode( widthOptions.content, true );\r\n\t\t\t\texampleOption        = clonedExampleOptions.querySelector( 'option' );\r\n\r\n\t\t\t\texampleOption.textContent = exampleOption.value = puzzleName;\r\n\r\n\t\t\t\tif (puzzleName === this.selectedExample) {\r\n\t\t\t\t\texampleOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchooseExampleSelect.appendChild( exampleOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// populate board size\r\n\t\t\tthis.boardSizes.forEach( ( sizeObj ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedSizeOptions = document.importNode( boardSizeOptions.content, true );\r\n\t\t\t\tsizeOption        = clonedSizeOptions.querySelector( 'option' );\r\n\r\n\t\t\t\tsizeOption.value       = sizeObj.handle;\r\n\t\t\t\tsizeOption.textContent = sizeObj.name;\r\n\r\n\r\n\t\t\t\tif (sizeObj.handle === this.boardSize.handle) {\r\n\t\t\t\t\tsizeOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tboardSizeSelect.appendChild( sizeOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tgenerate     = document.querySelector( '[data-nonogram-generate-button]' );\r\n\t\t\tchooseSelect = document.querySelector( '[data-nonogram-choose-predefined]' );\r\n\t\t\tboardSize    = document.querySelector( '[data-nonogram-board-size]' );\r\n\t\t\treset        = document.querySelector( '[data-nonogram-game-reset]' );\r\n\t\t\tsolve        = document.querySelector( '[data-nonogram-game-solve]' );\r\n\r\n\t\t\tgenerate.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tconst widthSelect    = document.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t\t  heightSelect   = document.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t\t  width          = widthSelect.value,\r\n\t\t\t\t\t  height         = heightSelect.value,\r\n\t\t\t\t\t  creator        = new Creator(),\r\n\t\t\t\t\t  puzzle         = creator.createRandom( width, height, null )\r\n\t\t\t\t;\r\n\t\t\t\tthis.selectedExample = null;\r\n\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t} );\r\n\r\n\t\t\tchooseSelect.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst creator = new Creator();\r\n\t\t\t\tlet puzzleDef, puzzle;\r\n\r\n\t\t\t\tif (chooseSelect.value !== '') {\r\n\t\t\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (chooseSelect.value === puzzleName) {\r\n\r\n\t\t\t\t\t\t\tpuzzleDef            = PuzzleLibrary[puzzleName];\r\n\t\t\t\t\t\t\tthis.selectedExample = puzzleName;\r\n\r\n\t\t\t\t\t\t\tif (puzzleDef.solutionGrid) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromGrid( puzzleDef.solutionGrid );\r\n\t\t\t\t\t\t\t} else if (puzzleDef.hints) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromHints( puzzleDef.hints );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif (puzzle) {\r\n\t\t\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tboardSize.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.boardSizes.forEach( ( item ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (item.handle === boardSize.value) {\r\n\t\t\t\t\t\tthis._changeBoardSize( item );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\treset.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis._resetPuzzle();\r\n\t\t\t} );\r\n\r\n\t\t\tsolve.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.drawSolution();\r\n\t\t\t\tthis.drawPreview( 'solution' );\r\n\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the console and populate with Creator _log\r\n\t */\r\n\tdrawConsole()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'console' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-console]' ),\r\n\t\t\t\t  node      = template.getNode(),\r\n\t\t\t\t  output    = node.querySelector( '[data-nonogram-console-output]' ),\r\n\t\t\t\t  line      = node.querySelector( '[data-nonogram-console-line]' )\r\n\t\t\t;\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.puzzle.creator instanceof Creator) {\r\n\t\t\t\tthis.puzzle.creator.log.forEach( ( text ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedLine = document.importNode( line.content, true ),\r\n\t\t\t\t\t\t  code       = clonedLine.querySelector( 'code' );\r\n\r\n\t\t\t\t\tcode.textContent = text.toString();\r\n\t\t\t\t\toutput.appendChild( code );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the preview grid for the current state of the puzzle\r\n\t *\r\n\t * @param solutionType\r\n\t */\r\n\tdrawPreview( solutionType )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'previewGrid' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-preview-grid]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\r\n\t\t\t// insert template\r\n\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node.querySelector( '[data-nonogram-preview]' ) );\r\n\r\n\r\n\t\t\t// draw preview canvas\r\n\r\n\t\t\tconst canvas          = document.querySelector( '[data-nonogram-preview-canvas]' ),\r\n\t\t\t\t  ctx             = canvas.getContext( '2d' ),\r\n\t\t\t\t  parentContainer = canvas.parentElement.parentElement.parentElement,\r\n\t\t\t\t  parentWidth     = parentContainer.offsetWidth,\r\n\t\t\t\t  parentHeight    = parentContainer.offsetHeight,\r\n\t\t\t\t  containerRatio  = parentWidth / parentHeight,\r\n\t\t\t\t  puzzleRatio     = this.puzzle.width / this.puzzle.height\r\n\t\t\t;\r\n\t\t\tlet cellSize;\r\n\r\n\t\t\tif (containerRatio > puzzleRatio) {\r\n\t\t\t\tcellSize = Math.floor( parentHeight / this.puzzle.height );\r\n\t\t\t} else {\r\n\t\t\t\tcellSize = Math.floor( parentWidth / this.puzzle.width );\r\n\t\t\t}\r\n\r\n\t\t\tcanvas.width  = cellSize * this.puzzle.width;\r\n\t\t\tcanvas.height = cellSize * this.puzzle.height;\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tif (cell[solutionType] === 1) {\r\n\t\t\t\t\tctx.fillRect( cell.column * cellSize, cell.row * cellSize, cellSize, cellSize );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the solution to the current puzzle\r\n\t */\r\n\tdrawSolution()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst filledTds = this.gridContainer.querySelectorAll( 'td.filled' );\r\n\r\n\r\n\t\t\tfilledTds.forEach( ( td ) =>\r\n\t\t\t{\r\n\t\t\t\ttd.classList.remove( 'filled', 'solution-positive', 'solution-negative', 'user-positive', 'user-negative', 'flipped' );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cellElem = this.gridContainer.querySelector( 'td[data-index=\"' + cell.index + '\"]' );\r\n\r\n\t\t\t\tcell.userSolution = cell.solution;\r\n\t\t\t\tcellElem.classList.add( 'user-solved' );\r\n\r\n\t\t\t\tif (cell.solution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-positive', 'user-positive', 'flipped' );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-negative', 'user-negative' );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {object} boardSize\r\n\t * @private\r\n\t */\r\n\t_changeBoardSize( boardSize )\r\n\t{\r\n\t\tconst puzzleTable = document.querySelector( '[data-nonogram-puzzle-grid-table]' ),\r\n\t\t\t  sizeSelect  = document.querySelector( '[data-nonogram-board-size]' )\r\n\t\t;\r\n\r\n\t\tif (puzzleTable && sizeSelect) {\r\n\r\n\t\t\tpuzzleTable.classList.remove( 'tiny', 'small', 'medium', 'large' );\r\n\t\t\tpuzzleTable.classList.add( boardSize.handle );\r\n\t\t\tsizeSelect.value = boardSize.handle;\r\n\r\n\t\t\tthis.boardSize = boardSize;\r\n\r\n\t\t\tthis.drawPreview();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resizeBoardForAvailableScreen()\r\n\t{\r\n\t\tconst table            = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  availableWidth   = this.gridContainer.clientWidth,\r\n\t\t\t  sortedBoardSizes = this.boardSizes.sort( ( a, b ) =>\r\n\t\t\t  {\r\n\t\t\t\t  return a.size > b.size ? -1 : 1;\r\n\t\t\t  } )\r\n\t\t;\r\n\t\tlet i;\r\n\r\n\r\n\t\t//if (this.puzzle.creator) {\r\n\t\t//this.puzzle.creator.log.push( 'tableWidth: ' + table.clientWidth + ', availableWidth: ' + availableWidth );\r\n\t\t//}\r\n\r\n\t\tif (table.clientWidth > availableWidth) {\r\n\r\n\t\t\tfor (i = 0; i < sortedBoardSizes.length; i++) {\r\n\r\n\t\t\t\tif (sortedBoardSizes[i].size < this.boardSize.size) {\r\n\r\n\t\t\t\t\tthis._changeBoardSize( sortedBoardSizes[i] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.puzzle.creator) {\r\n\r\n\t\t\t\t\t//this.puzzle.creator.log.push( sortedBoardSizes[i].handle +\r\n\t\t\t\t\t//\t', tableWidth: ' + table.clientWidth + ', availableWidth: ' + availableWidth\r\n\t\t\t\t\t//);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (table.clientWidth <= availableWidth) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawConsole();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_makePuzzlePlayable()\r\n\t{\r\n\t\tconst table    = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  cells    = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  allCells = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td' )\r\n\t\t;\r\n\r\n\t\tthis.playerClickMode = 1;\r\n\r\n\t\t// set css classes and event handlers for puzzle cells\r\n\r\n\t\tcells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.add( 'playable' );\r\n\r\n\t\t\t// highlight row/column on mouse hover\r\n\r\n\t\t\tcellElem.addEventListener( 'mouseenter', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconst hoverCell = e.currentTarget,\r\n\t\t\t\t\t  row       = hoverCell.getAttribute( 'data-row' ),\r\n\t\t\t\t\t  column    = hoverCell.getAttribute( 'data-column' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (cellElem.getAttribute( 'data-row' ) === row || cellElem.getAttribute( 'data-column' ) === column) {\r\n\t\t\t\t\t\tcellElem.classList.add( 'row-column-highlight' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\t// add cell click event handler\r\n\r\n\t\t\tcellElem.addEventListener( 'click', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cellElem  = e.currentTarget,\r\n\t\t\t\t\t  cellIndex = cellElem.getAttribute( 'data-index' ),\r\n\t\t\t\t\t  cell      = this.puzzle.getCellByIndex( cellIndex ),\r\n\t\t\t\t\t  solvedP   = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tcell.userSolution = cell.userSolution === this.playerClickMode ? null : this.playerClickMode;\r\n\r\n\t\t\t\ttable.classList.remove( 'solved' );\r\n\t\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\r\n\t\t\t\tif (cell.userSolution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-positive' );\r\n\t\t\t\t} else if (cell.userSolution === 0) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-negative' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcellElem.classList.toggle( 'flipped' );\r\n\r\n\t\t\t\tthis.drawPreview( 'userSolution' );\r\n\r\n\t\t\t\tif (this.puzzle.checkUserSolution()) {\r\n\t\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsolvedP.textContent = '';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\t// remove highlighted cells on puzzle grid mouseout\r\n\r\n\t\ttable.addEventListener( 'mouseleave', () =>\r\n\t\t{\r\n\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t{\r\n\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resetPuzzle()\r\n\t{\r\n\t\tconst cellElements = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  puzzleGrid   = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  solvedP      = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\tpuzzleGrid.classList.remove( 'solved' );\r\n\t\tsolvedP.textContent = '';\r\n\r\n\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t{\r\n\t\t\tcell.userSolution = null;\r\n\t\t} );\r\n\r\n\t\tcellElements.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\t\t} );\r\n\r\n\t\tthis.gridContainer.querySelector( '[data-nonogram-preview-grid]' ).innerHTML = '';\r\n\r\n\t\tthis.drawPreview( 'userSolution' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_showPuzzleSolved()\r\n\t{\r\n\t\tconst grid       = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  tableCells = document.querySelectorAll( '[data-nonogram-puzzle-grid-table] .puzzle-cell' ),\r\n\t\t\t  solvedP    = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\ttableCells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'row-column-highlight' )\r\n\t\t} );\r\n\r\n\t\tgrid.classList.add( 'solved' );\r\n\t\tsolvedP.textContent = 'Solved!';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param name\r\n\t * @returns {GuiTemplate}\r\n\t * @throws - error if template could not be found\r\n\t * @private\r\n\t */\r\n\t_getTemplate( name )\r\n\t{\r\n\t\tconst ret = this.templates.find( ( template ) =>\r\n\t\t{\r\n\t\t\treturn template.name === name;\r\n\t\t} );\r\n\r\n\t\tif (!(ret instanceof GuiTemplate)) {\r\n\t\t\tthrow '\"' + name + '\" template not found.';\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n","import {Puzzle} from '../src/puzzle.js';\r\nimport {Creator} from '../src/creator.js';\r\nimport {Solver} from '../src/solver.js';\r\nimport {Gui} from '../src/gui.js';\r\n\r\n\r\nexport {Puzzle, Creator, Solver, Gui};\r\n\r\n\r\n"],"sourceRoot":""}