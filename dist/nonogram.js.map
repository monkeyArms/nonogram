{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/utility.js","webpack:///./src/puzzle.js","webpack:///./src/puzzle-cell.js","webpack:///./src/puzzle-line.js","webpack:///./src/solver.js","webpack:///./src/creator.js","webpack:///./src/gui-template.js","webpack:///./src/puzzle-library.js","webpack:///./src/gui.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utility","array","index","indexOf","splice","length","Array","fill","slice","min","max","minCeil","Math","ceil","maxFloor","floor","random","Puzzle","width","height","toString","this","parseInt","totalCells","reset","zeroFill","getZeroFilledArray","creator","cells","rowHints","columnHints","grid","map","every","cell","userValue","userSolution","solution","row","start","end","push","column","indexInt","PuzzleCell","params","aiSolution","assign","PuzzleLine","type","minimumSectionLength","sections","solved","Solver","puzzle","_reset","passStart","passElapsedTime","totalElapsedTime","lineKey","line","Date","getTime","lastProgress","pass","isReset","_log","_getProgress","_getTotalSolved","lines","eliminateImpossibleFits","findKnownPositivesAndNegatives","findSectionDefiningChains","findAnchoredSections","findCompletedSections","findCompletedLines","elapsedTime","section","possibleStartIndex","newPossibleStartIndexes","lineSectionKey","startIndexKey","testCell","lineCellKey","minimumStartIndex","maximumStartIndex","_setCellSolution","cloneArray","possibleStartIndexes","removeFromArray","sectionKey","cellCounts","cellCountKey","cellCount","totalCellCounts","fillRange","firstSection","lastSection","cellKey","chain","chainKey","firstSortedSection","chains","lastValue","sort","a","b","firstNegative","lastNegative","totalSectionLength","totalPositiveSolved","rowNumber","rowCells","len","columnKey","columnHint","possibleRowIndexes","possibleColumnIndexes","solutionLog","getRowCells","knownIndexes","getColumnCells","puzzleCell","isRow","isCol","cellsSolved","html","cssClass","total","maxPossibilities","totalPossibilities","Creator","rowKey","currentVal","lastVal","hintKey","hint","density","cellsFilled","chanceOfCellFill","solutionGrid","rowArray","cellValue","solver","elapsed","puzzleValid","densityValid","getRandomIntBetween","_populatePuzzleFromGrid","solve","_logLine","creationTime","solvingTime","forEach","hints","solvedCell","cellIndex","getCellByIndex","msg","log","GuiTemplate","path","onLoadedCallbacks","isLoaded","loadedPromise","callback","Promise","resolve","fetch","then","response","ok","text","fireOnLoaded","div","document","createElement","innerHTML","PuzzleLibrary","Gui","themePath","head","querySelector","link","boardSizes","handle","size","boardSize","themeStylesheetPath","rel","href","prepend","templatesLoaded","themeTemplatesPath","templates","template","load","e","dispatchEvent","MouseEvent","all","drawGenerateControls","drawPuzzle","drawGameControls","drawConsole","_getTemplate","gridContainer","container","node","getNode","theadThTemplate","rowTemplate","cellClasses","tl","tr","bl","br","columnIndex","theadTh","importNode","content","fillDiv","setAttribute","classList","add","span","textContent","appendChild","parentNode","insertBefore","cellTemplate","hintsFillDiv","td","keys","innerHtml","_resizeBoardForAvailableScreen","_makePuzzlePlayable","drawPreview","fillModeCheckbox","addEventListener","fillModeLabel","prevActive","prevInactive","remove","checked","playerClickMode","removeEventListener","_keypressCallback","clonedWidthOptions","cloneHeightOptions","widthOption","heightOption","clonedExampleOptions","exampleOption","chooseSelect","clonedSizeOptions","sizeOption","generate","widthSelect","heightSelect","widthOptions","heightOptions","chooseExampleSelect","boardSizeSelect","boardSizeOptions","puzzleName","selectedExample","sizeObj","createRandom","draw","puzzleDef","createFromGrid","createFromHints","item","_changeBoardSize","_resetPuzzle","drawSolution","_showPuzzleSolved","output","code","solutionType","cellSize","canvas","ctx","getContext","parentContainer","parentElement","parentWidth","offsetWidth","parentHeight","offsetHeight","containerRatio","puzzleRatio","fillRect","querySelectorAll","cellElem","puzzleTable","sizeSelect","table","availableWidth","clientWidth","sortedBoardSizes","allCells","hoverCell","currentTarget","getAttribute","solvedP","preventDefault","toggle","checkUserSolution","cellElements","puzzleGrid","tableCells","ret","find"],"mappings":"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,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,KAEnkBJ,IAAQ,CACP,CAAC,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,E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","file":"nonogram.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Nonogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Nonogram\"] = factory();\n\telse\n\t\troot[\"Nonogram\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export {Utility};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {Utility}\r\n * @this Utility\r\n */\r\nconst Utility = class\r\n{\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @param value\r\n\t * @returns {array}\r\n\t */\r\n\tstatic removeFromArray( array, value )\r\n\t{\r\n\t\tconst index = array.indexOf( value );\r\n\r\n\t\tif (index !== -1) {\r\n\t\t\tarray.splice( index, 1 );\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param length\r\n\t * @returns {array}\r\n\t */\r\n\tstatic getZeroFilledArray( length )\r\n\t{\r\n\t\treturn new Array( length ).fill( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param array\r\n\t * @returns {array}\r\n\t */\r\n\tstatic cloneArray( array )\r\n\t{\r\n\t\treturn array.slice( 0 );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param min\r\n\t * @param max\r\n\t * @returns {number}\r\n\t */\r\n\tstatic getRandomIntBetween( min, max )\r\n\t{\r\n\t\tlet minCeil  = Math.ceil( min ),\r\n\t\t\tmaxFloor = Math.floor( max )\r\n\t\t;\r\n\r\n\t\treturn Math.floor( Math.random() * (maxFloor - minCeil + 1) ) + minCeil;\r\n\t}\r\n\r\n};\r\n\r\n\r\n","import {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Puzzle};\r\n\r\n/**\r\n * @class\r\n * @type {Puzzle}\r\n * @this Puzzle\r\n *\r\n * the main puzzle class containing the grid of cells, row/column hints, etc.\r\n *\r\n * @property {number} width\r\n * @property {number} height\r\n * @property {number} totalCells\r\n * @property {array} cells\r\n * @property {array} rowHints\r\n * @property {array} columnHints\r\n * @property {Creator|null} creator\r\n * @property {array} grid - a multi-dimensional array representing rows and columns.\r\n *                   for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n */\r\nconst Puzzle = class\r\n{\r\n\t/**\r\n\t * @param {number} width - an integer >= 1 specifying the number of rows\r\n\t * @param {number} height - an integer >= 1 specifying the number of columns\r\n\t * @throws - error if width or height are invalid\r\n\t */\r\n\tconstructor( width, height )\r\n\t{\r\n\t\tif (typeof width === 'undefined' || typeof height === 'undefined') {\r\n\r\n\t\t\tthrow('width and height are required constructor parameters.');\r\n\r\n\t\t} else if ((width <= 0 || height <= 0) || (width === 1 && height === 1)) {\r\n\r\n\t\t\tthrow('invalid dimensions: ' + width.toString() + ' x ' + height.toString());\r\n\t\t}\r\n\r\n\t\tthis.width      = typeof width === 'number' ? width : parseInt( width.toString(), 10 );\r\n\t\tthis.height     = typeof height === 'number' ? height : parseInt( height.toString(), 10 );\r\n\t\tthis.totalCells = this.width * this.height;\r\n\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * empty all arrays and create zero-filled multidimensional grid array\r\n\t */\r\n\treset()\r\n\t{\r\n\t\tconst zeroFill = Utility.getZeroFilledArray;\r\n\r\n\t\tthis.creator     = null;\r\n\t\tthis.cells       = [];\r\n\t\tthis.rowHints    = [];\r\n\t\tthis.columnHints = [];\r\n\t\tthis.grid        = zeroFill( this.height ).map( () =>\r\n\t\t{\r\n\t\t\treturn zeroFill( this.width );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @returns {boolean}\r\n\t */\r\n\tcheckUserSolution()\r\n\t{\r\n\t\treturn this.cells.every( ( cell ) =>\r\n\t\t{\r\n\t\t\t// cell.solution will be 0 or 1, but cell.userSolution might be null, 0 or 1\r\n\t\t\tconst userValue = cell.userSolution === 1 ? 1 : 0;\r\n\r\n\t\t\treturn cell.solution === userValue;\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} row\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetRowCells( row )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet start   = row * this.width,\r\n\t\t\tend     = start + this.width,\r\n\t\t\ti\r\n\t\t;\r\n\r\n\t\tfor (i = start; i < end; i++) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number} column\r\n\t * @returns {array|boolean}\r\n\t */\r\n\tgetColumnCells( column )\r\n\t{\r\n\t\tconst cells = [];\r\n\t\tlet i;\r\n\r\n\t\tfor (i = column; i < this.cells.length; i += this.width) {\r\n\t\t\tcells.push( this.cells[i] );\r\n\t\t}\r\n\r\n\t\treturn cells.length > 0 ? cells : false;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @param {number|string} index\r\n\t * @returns {object|boolean}\r\n\t */\r\n\tgetCellByIndex( index )\r\n\t{\r\n\t\tconst indexInt = typeof index !== 'number' ? parseInt( index, 10 ) : index;\r\n\r\n\t\treturn this.cells[indexInt] ? this.cells[indexInt] : false;\r\n\t}\r\n\r\n};\r\n\r\n","export {PuzzleCell};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleCell}\r\n * @this PuzzleCell\r\n *\r\n * a container representing a single cell in the puzzle grid\r\n *\r\n * @property {number} index\r\n * @property {number} column\r\n * @property {number} row\r\n * @property {*} solution - null, 0, or 1\r\n * @property {*} userSolution - null, 0, or 1\r\n * @property {*} aiSolution - null, 0, or 1\r\n */\r\nconst PuzzleCell = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.index        = -1;\r\n\t\tthis.column       = -1;\r\n\t\tthis.row          = -1;\r\n\t\tthis.solution     = null;\r\n\t\tthis.userSolution = null;\r\n\t\tthis.aiSolution   = null;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n","export {PuzzleLine};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {PuzzleLine}\r\n * @this PuzzleLine\r\n *\r\n * a container representing a complete row or column of grid cells\r\n *\r\n * @property {string} type - either 'row' or 'column'\r\n * @property {number} index - the column or row index\r\n * @property {number} length\r\n * @property {number} minimumSectionLength\r\n * @property {array} sections\r\n * @property {array} cells\r\n * @property {boolean} solved\r\n */\r\nconst PuzzleLine = class\r\n{\r\n\tconstructor( params )\r\n\t{\r\n\t\tthis.type                 = '';\r\n\t\tthis.index                = -1;\r\n\t\tthis.length               = 0;\r\n\t\tthis.minimumSectionLength = 0;\r\n\t\tthis.sections             = [];\r\n\t\tthis.cells                = [];\r\n\t\tthis.solved               = false;\r\n\r\n\t\tObject.assign( this, params );\r\n\t}\r\n};\r\n\r\n\r\n\r\n\r\n","import {PuzzleLine} from '../src/puzzle-line.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Solver};\r\n\r\n/**\r\n * @class\r\n * @type {Solver}\r\n * @this Solver\r\n *\r\n * a class that solves nonogram puzzles using logical techniques a human might use\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {number} elapsedTime\r\n * @property {boolean} isReset\r\n * @property {array} lines\r\n * @property {array} solutionLog\r\n */\r\nconst Solver = class\r\n{\r\n\r\n\t/**\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tconstructor( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tthis._reset();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {boolean}\r\n\t */\r\n\tsolve()\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet lastProgress = -1,\r\n\t\t\tpass         = 1,\r\n\t\t\tsolved, passStart, passEnd, end, passElapsedTime, totalElapsedTime, lineKey, line\r\n\t\t;\r\n\r\n\t\tif (!this.isReset) {\r\n\t\t\tthis._reset();\r\n\t\t}\r\n\r\n\t\tthis.isReset = false;\r\n\t\tthis._log( 'Starting solve algorithm', 'info' );\r\n\r\n\r\n\t\twhile (this._getProgress() > lastProgress && this._getTotalSolved() < this.puzzle.cells.length) {\r\n\r\n\t\t\tpassStart    = new Date().getTime();\r\n\t\t\tlastProgress = this._getProgress();\r\n\r\n\t\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\t\tline = this.lines[lineKey];\r\n\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.eliminateImpossibleFits( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findKnownPositivesAndNegatives( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findSectionDefiningChains( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findAnchoredSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedSections( line );\r\n\t\t\t\t}\r\n\t\t\t\tif (!line.solved) {\r\n\t\t\t\t\tthis.findCompletedLines( line );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tpassEnd         = new Date().getTime();\r\n\t\t\tpassElapsedTime = (passEnd - passStart) / 1000;\r\n\r\n\t\t\tthis._log( 'Pass ' + pass + ' completed in ' + passElapsedTime + ' seconds :: '\r\n\t\t\t\t+ this._getTotalSolved() + '/' + this.puzzle.cells.length + ' cells solved', 'info'\r\n\t\t\t);\r\n\t\t\tpass++;\r\n\t\t}\r\n\r\n\t\tsolved           = this._getTotalSolved() === this.puzzle.cells.length;\r\n\t\tend              = new Date().getTime();\r\n\t\ttotalElapsedTime = (end - start) / 1000;\r\n\r\n\t\tthis._log( 'Solve algorithm finished in ' + totalElapsedTime + ' seconds.', 'info' );\r\n\r\n\t\tif (solved) {\r\n\t\t\tthis._log( 'Solution Found.', 'success' );\r\n\t\t} else {\r\n\t\t\tthis._log( 'Could not find solution.', 'failure' );\r\n\t\t}\r\n\r\n\t\tthis.elapsedTime = totalElapsedTime;\r\n\r\n\t\treturn solved;\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tsolution algorithms\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\teliminateImpossibleFits( line )\r\n\t{\r\n\t\tlet minimumStartIndex = 0,\r\n\t\t\tmaximumStartIndex = line.length - line.minimumSectionLength,\r\n\t\t\ti, section, possibleStartIndex, newPossibleStartIndexes, lineSectionKey, startIndexKey, testCell, end,\r\n\t\t\tlineCellKey, lineKey\r\n\t\t;\r\n\r\n\r\n\t\t// no sections\r\n\r\n\t\tif (line.sections.length === 0) {\r\n\r\n\t\t\tfor (lineCellKey = 0; lineCellKey < line.cells.length; lineCellKey++) {\r\n\t\t\t\tthis._setCellSolution( line.cells[lineCellKey], 0 );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells start the line\r\n\r\n\t\tfor (lineKey = 0; lineKey < line.length; lineKey++) {\r\n\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tminimumStartIndex++;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// tighten range if one or more known negative cells end the line\r\n\r\n\t\tfor (lineKey = line.length - 1; lineKey >= 0; lineKey--) {\r\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\r\n\t\t\t\tmaximumStartIndex--;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tfor (lineSectionKey = 0; lineSectionKey < line.sections.length; lineSectionKey++) {\r\n\r\n\t\t\tsection                 = line.sections[lineSectionKey];\r\n\t\t\tnewPossibleStartIndexes = Utility.cloneArray( section.possibleStartIndexes );\r\n\r\n\t\t\t// eliminate places where section does not fit\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\r\n\t\t\t\ttestCell = line.cells[possibleStartIndex + section.length];\r\n\r\n\t\t\t\t// the total length of all sections including minimum gap(s) of one cell does not allow this section to fit:\r\n\r\n\t\t\t\tif (possibleStartIndex < minimumStartIndex || possibleStartIndex > maximumStartIndex) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known positive cell immediately following the possible section placement, so section cannot start here\r\n\r\n\t\t\t\tif (testCell && testCell.aiSolution === 1) {\r\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// there is a known impossible cell in this range, so section cannot fit here:\r\n\r\n\t\t\t\tend = possibleStartIndex + section.length - 1;\r\n\t\t\t\tend = (end > line.length - 1) ? line.length - 1 : end;\r\n\r\n\t\t\t\tfor (i = possibleStartIndex; i <= end; i++) {\r\n\t\t\t\t\tif (i > line.length - 1 || line.cells[i].aiSolution === 0) {\r\n\t\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\tminimumStartIndex += section.length + 1;\r\n\t\t\tmaximumStartIndex += section.length + 1;\r\n\r\n\t\t\tsection.possibleStartIndexes = newPossibleStartIndexes;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindKnownPositivesAndNegatives( line )\r\n\t{\r\n\t\tconst totalCellCounts = Utility.getZeroFilledArray( line.length );\r\n\t\tlet sectionKey, section, cellCounts, startIndexKey, possibleStartIndex, start, end, i, cellCountKey, cellCount,\r\n\t\t\tcell;\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection    = line.sections[sectionKey];\r\n\t\t\tcellCounts = Utility.getZeroFilledArray( line.length );\r\n\r\n\t\t\t// keep two counts: 1) all common cells for this section, and 2) cells where no section can be\r\n\r\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\r\n\r\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\r\n\t\t\t\tstart              = possibleStartIndex;\r\n\t\t\t\tend                = start + section.length - 1;\r\n\r\n\t\t\t\tfor (i = start; i <= end; i++) {\r\n\t\t\t\t\tcellCounts[i]++;\r\n\t\t\t\t\ttotalCellCounts[i]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// common to all possibilities, solve as positive\r\n\r\n\t\t\tfor (cellCountKey = 0; cellCountKey < cellCounts.length; cellCountKey++) {\r\n\r\n\t\t\t\tcellCount = cellCounts[cellCountKey];\r\n\t\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\t\tif (cell && cell.aiSolution === null && cellCount === section.possibleStartIndexes.length) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 1 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// no possible cells, remove as a possibility\r\n\r\n\t\tfor (cellCountKey = 0; cellCountKey < totalCellCounts.length; cellCountKey++) {\r\n\r\n\t\t\tcellCount = totalCellCounts[cellCountKey];\r\n\t\t\tcell      = line.cells[cellCountKey];\r\n\r\n\t\t\tif (cell && cell.aiSolution === null && cellCount === 0) {\r\n\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindAnchoredSections( line )\r\n\t{\r\n\t\tlet i, fillRange, firstSection, lastSection;\r\n\r\n\r\n\t\tif (line.sections.length > 0) {\r\n\r\n\t\t\tfirstSection = line.sections[0];\r\n\t\t\tlastSection  = line.sections[line.sections.length - 1];\r\n\r\n\t\t\t// find sections anchored to start of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = 0; i < line.cells.length; i++) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i, i + firstSection.length - 1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[i], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// find sections anchored to end of line\r\n\r\n\t\t\tfillRange = null;\r\n\r\n\t\t\tfor (i = line.cells.length - 1; i >= 0; i--) {\r\n\r\n\t\t\t\tif (line.cells[i].aiSolution === null) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\r\n\t\t\t\t\tfillRange = [i - lastSection.length + 1, i];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (fillRange !== null) {\r\n\r\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\r\n\t\t\t\t\tif (line.cells[i]) {\r\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[fillRange[0] - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[fillRange[0] - 1], 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindSectionDefiningChains( line )\r\n\t{\r\n\t\tlet chains    = [],\r\n\t\t\tlastValue = 0,\r\n\t\t\tcellKey, cell, chain, chainKey, sectionsSorted, firstSortedSection\r\n\t\t;\r\n\r\n\r\n\t\t// sort sections by highest length to lowest\r\n\r\n\t\tsectionsSorted     = Utility.cloneArray( line.sections ).sort( function ( a, b )\r\n\t\t{\r\n\t\t\treturn a.length > b.length ? -1 : 1;\r\n\t\t} );\r\n\t\tfirstSortedSection = sectionsSorted[0];\r\n\r\n\r\n\t\t// loop through all cells, creating array of connectors\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\tif (cell.aiSolution === 1) {\r\n\r\n\t\t\t\tif (lastValue !== 1) {\r\n\t\t\t\t\tchain = {\r\n\t\t\t\t\t\tstart:  cellKey,\r\n\t\t\t\t\t\tlength: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t\tchains.push( chain );\r\n\t\t\t\t} else if (chain) {\r\n\t\t\t\t\tchain.length++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlastValue = cell.aiSolution;\r\n\t\t}\r\n\r\n\r\n\t\t// if a connector is found with the first section's length, place negatives around it and mark the section as complete & continue\r\n\r\n\t\tfor (chainKey = 0; chainKey < chains.length; chainKey++) {\r\n\r\n\t\t\tchain = chains[chainKey];\r\n\r\n\t\t\tif (chain.length === firstSortedSection.length) {\r\n\r\n\t\t\t\tif (line.cells[chain.start - 1]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start - 1], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (line.cells[chain.start + firstSortedSection.length]) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start + firstSortedSection.length], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfirstSortedSection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedSections( line )\r\n\t{\r\n\t\tlet sectionKey, section, firstNegative, lastNegative;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\r\n\r\n\t\t\t// only one possible place...\r\n\r\n\t\t\tif (!section.solved && section.possibleStartIndexes.length === 1) {\r\n\r\n\t\t\t\t// make sure there is a negative cell on either side of the section\r\n\r\n\t\t\t\tfirstNegative = section.possibleStartIndexes[0] - 1;\r\n\t\t\t\tlastNegative  = section.possibleStartIndexes[0] + section.length;\r\n\r\n\t\t\t\tif (line.cells[firstNegative] && line.cells[firstNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[firstNegative], 0 );\r\n\t\t\t\t}\r\n\t\t\t\tif (line.cells[lastNegative] && line.cells[lastNegative].aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( line.cells[lastNegative], 0 );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsection.solved = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleLine} line\r\n\t */\r\n\tfindCompletedLines( line )\r\n\t{\r\n\t\tlet totalSectionLength  = 0,\r\n\t\t\ttotalPositiveSolved = 0,\r\n\t\t\tsectionKey, section, cellKey, cell\r\n\t\t;\r\n\r\n\t\t// complete lines where all sections have been found\r\n\r\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\r\n\t\t\tsection = line.sections[sectionKey];\r\n\t\t\ttotalSectionLength += section.length;\r\n\t\t}\r\n\r\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\tcell = line.cells[cellKey];\r\n\t\t\ttotalPositiveSolved += cell.aiSolution === 1;\r\n\t\t}\r\n\r\n\t\tif (totalSectionLength === totalPositiveSolved) {\r\n\r\n\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\tif (cell.aiSolution === null) {\r\n\t\t\t\t\tthis._setCellSolution( cell, 0 );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t//\t#############################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tconst possibleRowIndexes    = [],\r\n\t\t\t  possibleColumnIndexes = []\r\n\t\t;\r\n\t\tlet i, cellKey, rowNumber, rowHints, rowCells, line, index, len, columnKey, columnHint;\r\n\r\n\t\tthis.isReset     = true;\r\n\t\tthis.elapsedTime = 0;\r\n\t\tthis.solutionLog = [];\r\n\t\tthis.lines       = [];\r\n\r\n\t\tthis._log( 'Resetting variables', 'info' );\r\n\r\n\t\t// reset cell.aiSolution\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\tthis.puzzle.cells[cellKey].aiSolution = null;\r\n\t\t}\r\n\r\n\t\t// reset possibleRowIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.width; i++) {\r\n\t\t\tpossibleRowIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset possibleColumnIndexes\r\n\r\n\t\tfor (i = 0; i < this.puzzle.height; i++) {\r\n\t\t\tpossibleColumnIndexes.push( i );\r\n\t\t}\r\n\r\n\t\t// reset rowHints\r\n\r\n\t\tfor (rowNumber = 0; rowNumber < this.puzzle.rowHints.length; rowNumber++) {\r\n\r\n\t\t\trowHints = this.puzzle.rowHints[rowNumber];\r\n\t\t\trowCells = this.puzzle.getRowCells( rowNumber );\r\n\r\n\t\t\tif (rowCells) {\r\n\r\n\t\t\t\tline = new PuzzleLine( {\r\n\t\t\t\t\ttype:   'row',\r\n\t\t\t\t\tindex:  rowNumber,\r\n\t\t\t\t\tlength: this.puzzle.width,\r\n\t\t\t\t\tcells:  rowCells\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tfor (index = 0; index < rowHints.length; index++) {\r\n\r\n\t\t\t\t\tlen = rowHints[index];\r\n\t\t\t\t\tline.sections.push( {\r\n\t\t\t\t\t\tindex:                index,\r\n\t\t\t\t\t\tlength:               len,\r\n\t\t\t\t\t\tpossibleStartIndexes: possibleRowIndexes,\r\n\t\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\t\tsolved:               false\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\t\tthis.lines.push( line );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// reset columnHints\r\n\r\n\t\tfor (columnKey = 0; columnKey < this.puzzle.columnHints.length; columnKey++) {\r\n\r\n\t\t\tcolumnHint = this.puzzle.columnHints[columnKey];\r\n\t\t\tline       = new PuzzleLine( {\r\n\t\t\t\ttype:   'column',\r\n\t\t\t\tindex:  columnKey,\r\n\t\t\t\tlength: this.puzzle.height,\r\n\t\t\t\tcells:  this.puzzle.getColumnCells( columnKey ),\r\n\t\t\t} );\r\n\r\n\t\t\tfor (index = 0; index < columnHint.length; index++) {\r\n\t\t\t\tlen = columnHint[index];\r\n\t\t\t\tline.sections.push( {\r\n\t\t\t\t\tindex:                index,\r\n\t\t\t\t\tlength:               len,\r\n\t\t\t\t\tpossibleStartIndexes: possibleColumnIndexes,\r\n\t\t\t\t\tknownIndexes:         [],\r\n\t\t\t\t\tsolved:               false\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tline.minimumSectionLength += len + 1;\r\n\t\t\t}\r\n\r\n\t\t\tline.minimumSectionLength--;\r\n\r\n\t\t\tthis.lines.push( line );\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {PuzzleCell} puzzleCell\r\n\t * @param {number} value\r\n\t * @private\r\n\t */\r\n\t_setCellSolution( puzzleCell, value )\r\n\t{\r\n\t\tlet lineKey, line, isRow, isCol, cellsSolved, cellKey, cell;\r\n\r\n\t\tif (puzzleCell.aiSolution !== null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline        = this.lines[lineKey];\r\n\t\t\tisRow       = line.type === 'row' && line.index === puzzleCell.row;\r\n\t\t\tisCol       = line.type === 'column' && line.index === puzzleCell.column;\r\n\t\t\tcellsSolved = 0;\r\n\r\n\t\t\tif (isRow || isCol) {\r\n\r\n\t\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\r\n\r\n\t\t\t\t\tcell = line.cells[cellKey];\r\n\r\n\t\t\t\t\tif (cell.index === puzzleCell.index) {\r\n\t\t\t\t\t\tcell.aiSolution = value;\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t} else if (cell.aiSolution !== null) {\r\n\t\t\t\t\t\tcellsSolved++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (cellsSolved === line.length) {\r\n\t\t\t\t\tline.solved = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param html\r\n\t * @param cssClass\r\n\t * @private\r\n\t */\r\n\t_log( html, cssClass )\r\n\t{\r\n\t\tthis.solutionLog.push( {\r\n\t\t\thtml:     html,\r\n\t\t\tcssClass: cssClass || 'info'\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getTotalSolved()\r\n\t{\r\n\t\tlet total = 0,\r\n\t\t\tcellKey\r\n\t\t;\r\n\r\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\r\n\t\t\ttotal += this.puzzle.cells[cellKey].aiSolution !== null;\r\n\t\t}\r\n\r\n\t\treturn total;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * calculate the maximum # of possible permutations, depending on the current state of the solving process.\r\n\t *\r\n\t * @returns {number}\r\n\t * @private\r\n\t */\r\n\t_getProgress()\r\n\t{\r\n\t\tlet maxPossibilities   = 0,\r\n\t\t\ttotalPossibilities = 0,\r\n\t\t\tlineKey, line, sectionKey\r\n\t\t;\r\n\r\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\r\n\r\n\t\t\tline = this.lines[lineKey];\r\n\t\t\tmaxPossibilities += line.sections.length * (line.type === 'row' ? this.puzzle.width : this.puzzle.height);\r\n\r\n\t\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\r\n\t\t\t\ttotalPossibilities += line.sections[sectionKey].possibleStartIndexes.length;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn maxPossibilities - totalPossibilities;\r\n\t}\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Puzzle} from '../src/puzzle.js';\r\nimport {PuzzleCell} from '../src/puzzle-cell.js';\r\nimport {Solver} from '../src/solver.js';\r\nimport {Utility} from '../src/utility.js';\r\n\r\n\r\nexport {Creator};\r\n\r\n/**\r\n * @class\r\n * @type {Creator}\r\n * @this Creator\r\n *\r\n * creates nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {array} log\r\n * @property {number} creationTime\r\n * @property {number} solvingTime\r\n */\r\nconst Creator = class\r\n{\r\n\r\n\r\n\t// ######################################################################################\tpublic methods\r\n\r\n\t/**\r\n\t * populates the puzzles rows and columns with random, solvable values\r\n\t *\r\n\t * @param {number} width\r\n\t * @param {number} height\r\n\t * @param {number|null} density - a floating point number between 0 and 1 (optional) that controls the percentage of filled cell likelihood.\r\n\t *                                    If not supplied a random value between 0.2 and 0.8 will be generated.\r\n\t *                                    Note that this does not make a puzzle grid filled in by the percentage,\r\n\t *                                    rather it's a 'suggestion' that is run through randomization on a cell-by-cell basis.\r\n\t * @returns {Puzzle|Puzzle|class}\r\n\t */\r\n\tcreateRandom( width, height, density )\r\n\t{\r\n\t\tconst start      = new Date().getTime();\r\n\t\tlet puzzleValid  = false,\r\n\t\t\tdensityValid = typeof density === 'number' && density >= 0 && density <= 1,\r\n\t\t\tcellsFilled, chanceOfCellFill, solutionGrid, rowArray, cellValue, solver, i, elapsed\r\n\t\t;\r\n\r\n\r\n\t\tthis.puzzle = new Puzzle( width, height );\r\n\t\tthis._reset();\r\n\r\n\r\n\t\twhile (puzzleValid === false) {\r\n\r\n\t\t\tchanceOfCellFill = densityValid ? density : Utility.getRandomIntBetween( 200, 800 ) / 1000;\r\n\t\t\tsolutionGrid     = [];\r\n\t\t\trowArray         = [];\r\n\t\t\tcellsFilled      = 0;\r\n\r\n\t\t\tthis._log( 'Creating random ' +\r\n\t\t\t\tthis.puzzle.width + 'x' + this.puzzle.height +\r\n\t\t\t\t' puzzle with density of ' + chanceOfCellFill + '...'\r\n\t\t\t);\r\n\r\n\t\t\t// create puzzle grid randomly using density as a factor\r\n\r\n\t\t\tfor (i = 0; i < this.puzzle.totalCells; i++) {\r\n\r\n\t\t\t\tcellValue = Math.random() < chanceOfCellFill ? 1 : 0;\r\n\r\n\t\t\t\tcellsFilled += cellValue;\r\n\r\n\t\t\t\tif (i % this.puzzle.width === 0 && i > 0) {\r\n\t\t\t\t\tsolutionGrid.push( rowArray );\r\n\t\t\t\t\trowArray = [];\r\n\t\t\t\t}\r\n\r\n\t\t\t\trowArray.push( cellValue );\r\n\t\t\t}\r\n\r\n\t\t\t// ensure that at least one cell is filled, and that not all of them are\r\n\r\n\t\t\tif (cellsFilled === 0) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has no cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t} else if (cellsFilled === this.puzzle.totalCells) {\r\n\r\n\t\t\t\tthis._log( 'Generated puzzle has all cells filled.  Trying again...' );\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\r\n\t\t\t// populate the solution grid\r\n\t\t\tsolutionGrid.push( rowArray );\r\n\r\n\t\t\t// populate the grid\r\n\t\t\tthis.puzzle = Creator._populatePuzzleFromGrid( this.puzzle, solutionGrid );\r\n\r\n\r\n\t\t\t// ensure that puzzle is solvable\r\n\t\t\tsolver = new Solver( this.puzzle );\r\n\r\n\t\t\tif (solver.solve()) {\r\n\r\n\t\t\t\tpuzzleValid = true;\r\n\t\t\t\telapsed     = (new Date().getTime() - start) / 1000;\r\n\r\n\t\t\t\tthis._log( 'Puzzle is solvable - solved in ' + solver.elapsedTime + ' seconds' );\r\n\t\t\t\tthis._logLine();\r\n\t\t\t\tthis._log( 'Puzzle generated in ' + elapsed + ' seconds.' );\r\n\r\n\t\t\t\tthis.creationTime = elapsed;\r\n\t\t\t\tthis.solvingTime  = solver.elapsedTime;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._log( 'Puzzle cannot be solved.  Trying again...' );\r\n\t\t\t}\r\n\r\n\t\t\tthis._logLine();\r\n\t\t}\r\n\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle using a grid\r\n\t *\r\n\t * @param {array} grid - a multi-dimensional array representing rows and columns.\r\n\t *                         for example a 2x2 grid could be represented by [[0,1],[0,0]]\r\n\t * @throws - error if grid is invalid\r\n\t */\r\n\tcreateFromGrid( grid )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width   = 0,\r\n\t\t\theight  = 0,\r\n\t\t\tpuzzle, solver, elapsed\r\n\t\t;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from grid array.' );\r\n\r\n\t\t// make sure grid is valid and get width & height\r\n\t\tif (!(grid instanceof Array)) {\r\n\t\t\tthrow 'grid is not an array';\r\n\t\t}\r\n\r\n\r\n\t\tgrid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\tif (!(row instanceof Array)) {\r\n\t\t\t\tthrow 'grid is not a multi-dimensional array';\r\n\t\t\t}\r\n\r\n\t\t\tif (width === 0) {\r\n\t\t\t\twidth = row.length;\r\n\t\t\t} else if (row.length !== width) {\r\n\t\t\t\tthrow 'row ' + rowKey + ' has an invalid length (' + row.length + ') - expecting ' + width;\r\n\t\t\t}\r\n\r\n\t\t\theight++;\r\n\t\t} );\r\n\r\n\t\tthis._log( 'grid is valid' );\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\t\tpuzzle = new Puzzle( width, height );\r\n\r\n\t\tthis.puzzle         = Creator._populatePuzzleFromGrid( puzzle, grid );\r\n\t\tthis.puzzle.creator = this;\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - create a puzzle from a hint object\r\n\t *\r\n\t * @param {object} hints - structured as follows:\r\n\t *                            {\r\n\t *\t\t\t\t\t\t\t\t\trow: [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t *\t\t\t\t\t\t\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t *\t\t\t\t\t\t\t  }\r\n\t * @param {array} hints.row\r\n\t * @param {array} hints.column\r\n\t * @throws - error if hints object is structured incorrectly\r\n\t */\r\n\tcreateFromHints( hints )\r\n\t{\r\n\t\tconst start = new Date();\r\n\t\tlet width, height, puzzle, solver, elapsed;\r\n\r\n\t\tthis._reset();\r\n\r\n\t\tthis._log( 'creating puzzle from hints' );\r\n\r\n\t\t// make sure row & column properties exist\r\n\r\n\t\tif (typeof hints !== 'object' || !hints.row || !hints.column) {\r\n\r\n\t\t\tthrow 'parameter passed to createFromHints() must be an object containing \"row\" and \"column\" properties';\r\n\r\n\t\t} else if (!(hints.row instanceof Array) || !(hints.column instanceof Array)) {\r\n\r\n\t\t\tthrow 'hints.row or hints.column must be an array.';\r\n\t\t}\r\n\t\t\r\n\t\tthis._log( 'found row and column hints' );\r\n\r\n\t\twidth              = hints.column.length;\r\n\t\theight             = hints.row.length;\r\n\t\tpuzzle             = new Puzzle( width, height );\r\n\t\tpuzzle.rowHints    = hints.row;\r\n\t\tpuzzle.columnHints = hints.column;\r\n\t\tpuzzle.creator     = this;\r\n\r\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\r\n\r\n\r\n\t\t// populate cells array\r\n\r\n\t\tpuzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t{\r\n\t\t\trow.forEach( ( column, columnKey ) =>\r\n\t\t\t{\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:  (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn: columnKey,\r\n\t\t\t\t\trow:    rowKey\r\n\t\t\t\t} ) );\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\r\n\t\t// ensure that puzzle is solvable\r\n\r\n\t\tsolver = new Solver( this.puzzle );\r\n\r\n\r\n\t\tif (solver.solve()) {\r\n\r\n\t\t\tthis._log( 'Puzzle is solvable.' );\r\n\t\t\tthis._logLine();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\r\n\t\t\tthis._logLine();\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// set solution on puzzle cells\r\n\r\n\t\tsolver.puzzle.cells.forEach( ( solvedCell, cellIndex ) =>\r\n\t\t{\r\n\t\t\tconst puzzleCell = this.puzzle.getCellByIndex( cellIndex );\r\n\r\n\t\t\tpuzzleCell.aiSolution = solvedCell.aiSolution;\r\n\t\t\tpuzzleCell.solution   = solvedCell.aiSolution;\r\n\t\t} );\r\n\r\n\t\telapsed = (new Date().getTime() - start) / 1000;\r\n\r\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\r\n\t\tthis._logLine();\r\n\r\n\t\treturn this.puzzle;\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t * @param {array} grid - a multidimensional array\r\n\t * @returns {Puzzle} puzzle\r\n\t * @private\r\n\t */\r\n\tstatic _populatePuzzleFromGrid( puzzle, grid )\r\n\t{\r\n\t\tlet columnHints, rowKey, row, columnKey, column, cell, currentVal, lastVal, rowHints, hintKey, hint;\r\n\r\n\t\tpuzzle.reset();\r\n\r\n\t\tpuzzle.grid = grid;\r\n\r\n\r\n\t\tfor (rowKey = 0; rowKey < puzzle.grid.length; rowKey++) {\r\n\r\n\t\t\trow      = puzzle.grid[rowKey];\r\n\t\t\trowHints = [];\r\n\r\n\t\t\tpuzzle.rowHints[rowKey] = [];\r\n\r\n\t\t\tfor (columnKey = 0; columnKey < row.length; columnKey++) {\r\n\r\n\t\t\t\tcolumn     = row[columnKey];\r\n\t\t\t\tcurrentVal = column;\r\n\t\t\t\tlastVal    = columnKey > 0 ? puzzle.grid[rowKey][columnKey - 1] : 0;\r\n\r\n\t\t\t\t// populate cells\r\n\r\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\r\n\t\t\t\t\tindex:    (rowKey * puzzle.width) + columnKey,\r\n\t\t\t\t\tcolumn:   columnKey,\r\n\t\t\t\t\trow:      rowKey,\r\n\t\t\t\t\tsolution: column\r\n\t\t\t\t} ) );\r\n\r\n\t\t\t\t// populate row hints\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\trowHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\trowHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\trowHints[rowHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up row hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < rowHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = rowHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.rowHints[rowKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// populate column hints\r\n\r\n\t\tfor (columnKey = 0; columnKey < puzzle.width; columnKey++) {\r\n\r\n\t\t\tpuzzle.columnHints[columnKey] = [];\r\n\t\t\tcolumnHints                   = [];\r\n\r\n\t\t\tfor (cell = columnKey; cell < puzzle.totalCells; cell += puzzle.width) {\r\n\r\n\t\t\t\trow        = Math.floor( cell / puzzle.width );\r\n\t\t\t\tcurrentVal = puzzle.grid[row][columnKey];\r\n\t\t\t\tlastVal    = row > 0 ? puzzle.grid[row - 1][columnKey] : 0;\r\n\r\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\r\n\t\t\t\t\tcolumnHints.push( 1 );\r\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints.push( 0 );\r\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\r\n\t\t\t\t\tcolumnHints[columnHints.length - 1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// clean up column hints\r\n\r\n\t\t\tfor (hintKey = 0; hintKey < columnHints.length; hintKey++) {\r\n\r\n\t\t\t\thint = columnHints[hintKey];\r\n\r\n\t\t\t\tif (hint > 0) {\r\n\t\t\t\t\tpuzzle.columnHints[columnKey].push( hint );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn puzzle;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param msg\r\n\t * @private\r\n\t */\r\n\t_log( msg )\r\n\t{\r\n\t\tthis.log.push( msg );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_logLine()\r\n\t{\r\n\t\tthis.log.push( '-----------------------------------' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_reset()\r\n\t{\r\n\t\tthis.log          = [];\r\n\t\tthis.creationTime = 0;\r\n\t\tthis.solvingTime  = 0;\r\n\t}\r\n\r\n};\r\n\r\n","export {GuiTemplate};\r\n\r\n\r\n/**\r\n * @class\r\n * @type {GuiTemplate}\r\n * @this GuiTemplate\r\n *\r\n * @property {string} name\r\n * @property {string} path\r\n * @property {string} html\r\n * @property {array} loadedCallbacks\r\n * @property {Promise} loadedPromise - resolves once template has been loaded and parsed\r\n * @property {boolean} isLoaded\r\n */\r\nconst GuiTemplate = class\r\n{\r\n\t/**\r\n\t * class for loading an html template\r\n\t *\r\n\t * @param name\r\n\t * @param path\r\n\t */\r\n\tconstructor( name, path )\r\n\t{\r\n\t\tthis.name              = name;\r\n\t\tthis.path              = path;\r\n\t\tthis.html              = '';\r\n\t\tthis.onLoadedCallbacks = [];\r\n\t\tthis.isLoaded          = false;\r\n\t\tthis.loadedPromise     = null;\r\n\t}\r\n\r\n\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * attach a callback to fire once template has loaded\r\n\t *\r\n\t * @param {function} callback\r\n\t */\r\n\tonLoad( callback )\r\n\t{\r\n\t\tthis.onLoadedCallbacks.push( callback );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * fired when template is loaded.  executes all onLoad callbacks\r\n\t */\r\n\tfireOnLoaded()\r\n\t{\r\n\t\tthis.onLoadedCallbacks.forEach( ( callback ) =>\r\n\t\t{\r\n\t\t\tcallback();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * attempts to fetch a template specified by this.path\r\n\t *\r\n\t * @returns {Promise} - complete when template has been fetched and parsed\r\n\t * @throws - error if template cannot be loaded\r\n\t */\r\n\tload()\r\n\t{\r\n\t\tthis.loadedPromise = new Promise( ( resolve ) =>\r\n\t\t{\r\n\t\t\tfetch( this.path ).then( ( response ) =>\r\n\t\t\t{\r\n\t\t\t\tif (response.ok) {\r\n\r\n\t\t\t\t\tresponse.text().then( ( text ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.html     = text;\r\n\t\t\t\t\t\tthis.isLoaded = true;\r\n\t\t\t\t\t\tthis.fireOnLoaded();\r\n\r\n\t\t\t\t\t\tresolve( this.name + ' loaded and parsed' );\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow 'loading failed for \"' + this.path + '\"';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\treturn this.loadedPromise;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * get the html template as a DOM node\r\n\t * @returns {HTMLDivElement}\r\n\t */\r\n\tgetNode()\r\n\t{\r\n\t\tconst div = document.createElement( 'div' );\r\n\r\n\t\tdiv.innerHTML = this.html;\r\n\r\n\t\treturn div;\r\n\t}\r\n\r\n};\r\n","export {PuzzleLibrary};\r\n\r\n\r\n/**\r\n *\r\n * @type {{'Large Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Medium Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 1': {solutionGrid: *[], width: number, height: number}, 'Medium Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 3': {hints: {column: *[], row: *[]}, width: number, height: number}}}\r\n */\r\nconst PuzzleLibrary = {\r\n\r\n\t\"Small Example 1\": {\r\n\t\twidth:        8,\r\n\t\theight:       8,\r\n\t\tsolutionGrid: [\r\n\t\t\t[0, 0, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 0, 1, 1, 1, 0],\r\n\t\t\t[0, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 1, 0, 1, 0, 0, 0, 1],\r\n\t\t\t[1, 1, 0, 1, 1, 1, 1, 1],\r\n\t\t\t[1, 0, 0, 0, 1, 1, 1, 0]\r\n\t\t]\r\n\t},\r\n\r\n\t\"Small Example 2\": {\r\n\t\twidth:  8,\r\n\t\theight: 8,\r\n\t\thints:  {\r\n\t\t\trow:    [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\r\n\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Small Example 3\": {\r\n\t\twidth:  10,\r\n\t\theight: 10,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[3], [1, 1], [1], [6], [8], [2, 1], [4, 1], [10], [3, 1], [3]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4], [5], [2, 3], [2, 3], [2, 1], [2, 1], [2, 1], [10], [1, 1, 1], [2, 1, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Medium Example 1\": {\r\n\t\twidth:  16,\r\n\t\theight: 18,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[5], [4, 3, 3], [7, 6, 2], [4, 3, 4, 1], [3, 2, 4, 1, 2], [2, 6, 4], [3, 3, 1, 1], [4, 6, 4], [6, 4, 1, 1], [4, 3, 4, 1], [7, 6, 2], [4, 3, 3], [5], [3], [5, 3, 3], [2, 4, 1, 2]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[5], [9], [3, 5], [3, 5, 1], [4, 4, 2], [2, 1, 1, 2, 1], [2, 2, 1], [2, 3, 2, 1], [7, 2], [9, 1], [2, 2, 2, 2, 2], [3, 2, 2, 3, 2], [4, 1, 1, 6], [1, 2, 2, 2], [16], [2, 1, 1, 1, 1, 2, 1], [2, 2, 2, 2, 2], [9, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\r\n\t\"Medium Example 2\": {\r\n\t\twidth:  15,\r\n\t\theight: 15,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[4], [3, 1], [2, 3], [1, 2, 2], [1, 2, 1], [1, 1, 1, 1], [4, 3, 3], [2, 2, 4, 3], [1, 2, 5, 1], [1, 2, 4, 1], [1, 2, 5, 1], [2, 2, 4, 3], [9, 3], [5, 1, 1], [6, 1]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[4, 5], [3, 2, 2], [2, 1, 1], [1, 4, 3], [2, 9], [2, 8], [2, 3], [12], [1, 7, 1], [9], [5], [1, 1], [2, 2], [3, 3], [1, 7, 1]\r\n\t\t\t]\r\n\t\t}\r\n\t},\r\n\r\n\t\"Large Example 1\": {\r\n\t\twidth:  30,\r\n\t\theight: 30,\r\n\t\thints:  {\r\n\t\t\tcolumn: [\r\n\t\t\t\t[19, 9], [13, 1, 2, 1, 5], [11, 4, 1, 1, 2, 3], [10, 6, 1, 4, 1, 1], [9, 7, 1, 1, 3, 2], [3, 4, 11, 1, 6], [2, 1, 2, 3, 3, 3, 7], [2, 2, 1, 2, 4, 3, 8], [3, 2, 2, 1, 2, 6, 7], [1, 3, 3, 4, 1, 4, 4, 1], [5, 4, 2, 5, 2, 2], [1, 3, 11, 1, 2, 4], [3, 2, 14, 5], [2, 2, 1, 14, 7], [1, 2, 2, 2, 10, 2], [2, 1, 3, 2, 6, 3, 3], [5, 6, 6, 2, 2, 4], [6, 4, 4, 3, 3, 3], [6, 3, 2, 1, 1, 3, 5, 2], [6, 1, 2, 2, 2, 2, 2, 3], [7, 1, 9, 2, 4], [7, 3, 1, 2, 2, 3], [8, 2, 5, 4, 3], [6, 1, 7, 11], [5, 1, 3, 2, 12], [5, 2, 2, 2, 3, 11], [4, 5, 4, 3, 10], [3, 14, 10], [3, 3, 5, 2, 9], [4, 3, 3, 10]\r\n\t\t\t],\r\n\t\t\trow:    [\r\n\t\t\t\t[10, 19], [9, 1, 2, 15], [6, 1, 1, 1, 14], [5, 2, 3, 2, 11, 1], [6, 7, 11, 1], [7, 5, 7, 3], [8, 4, 3, 4], [6, 4, 5, 1, 4, 1], [5, 8, 6, 2, 1], [4, 10, 3, 3, 3, 1], [3, 3, 5, 2, 4, 2, 2], [2, 3, 3, 3, 2, 4, 2, 3], [2, 3, 1, 1, 5, 2, 1, 6], [1, 4, 3, 4, 2, 2, 2, 4], [1, 4, 3, 4, 5, 3, 3], [1, 5, 5, 2, 1, 4, 1, 1], [1, 15, 3, 2, 3, 1], [2, 4, 7, 2, 2, 3, 1], [1, 4, 4, 7, 2, 1, 3], [1, 2, 3, 4, 3, 3, 1], [1, 1, 3, 5, 2, 6, 1], [1, 1, 1, 4, 4, 9], [2, 3, 1, 1, 1, 9], [1, 2, 4, 1, 1, 6, 8], [1, 10, 1, 7, 7], [2, 8, 2, 1, 2, 1, 7], [3, 6, 3, 1, 1, 1, 7], [4, 4, 4, 3, 11], [3, 5, 20], [2, 7, 19]\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n};\r\n\r\n","import {GuiTemplate} from '../src/gui-template.js';\r\nimport {PuzzleLibrary} from '../src/puzzle-library.js';\r\nimport {Creator} from '../src/creator.js';\r\n\r\n\r\nexport {Gui};\r\n\r\n/**\r\n * @class\r\n * @type {Gui}\r\n * @this Gui\r\n *\r\n * provides a user interface for interacting with nonogram puzzles\r\n *\r\n * @property {Puzzle} puzzle\r\n * @property {HTMLElement} gridContainer - container element for the puzzle grid ui\r\n * @property {array} templates - array of GuiTemplate objects\r\n * @property {array} templatesLoaded - array of Promises from each loaded template\r\n * @property {string|null} theme - the theme to use, located in the themes/ directory\r\n * @property {string} themePath - the path to the specified theme located in themes/{theme}\r\n * @property {string} themeStylesheetPath - the path to the theme stylesheet located in themes/{theme}/styles.css\r\n * @property {string} themeTemplatesPath - the path to the theme template directory located in themes/{theme}/templates\r\n * @property {int} playerClickMode - whether to fill or cross a cell on click\r\n */\r\nconst Gui = class\r\n{\r\n\r\n\t/**\r\n\t *\r\n\t * @param {string|null} themePath - the path to the theme directory.  Defaults to ./themes/default\r\n\t */\r\n\tconstructor( themePath )\r\n\t{\r\n\t\tconst head = document.querySelector( 'head' ),\r\n\t\t\t  link = document.createElement( 'link' )\r\n\t\t;\r\n\r\n\t\t// set up board sizes\r\n\t\tthis.boardSizes = [\r\n\t\t\t{ name: 'Tiny', handle: 'tiny', size: 1 },\r\n\t\t\t{ name: 'Small', handle: 'small', size: 2 },\r\n\t\t\t{ name: 'Medium', handle: 'medium', size: 3 },\r\n\t\t\t{ name: 'Large', handle: 'large', size: 4 },\r\n\t\t];\r\n\t\tthis.boardSize  = this.boardSizes[2];\r\n\r\n\t\t// set up theme\r\n\t\tthis.themePath = themePath || './themes/default';\r\n\r\n\t\t// load theme stylesheet\r\n\t\tthis.themeStylesheetPath = this.themePath + '/styles.css';\r\n\t\tlink.rel                 = 'stylesheet';\r\n\t\tlink.type                = 'text/css';\r\n\t\tlink.href                = this.themeStylesheetPath;\r\n\t\thead.prepend( link );\r\n\r\n\t\t// set up templates\r\n\t\tthis.templatesLoaded    = [];\r\n\t\tthis.themeTemplatesPath = this.themePath + '/templates';\r\n\t\tthis.templates          = [\r\n\t\t\tnew GuiTemplate( 'gameControls', this.themeTemplatesPath + '/controls-game.html' ),\r\n\t\t\tnew GuiTemplate( 'generateControls', this.themeTemplatesPath + '/controls-generate.html' ),\r\n\t\t\tnew GuiTemplate( 'console', this.themeTemplatesPath + '/console.html' ),\r\n\t\t\tnew GuiTemplate( 'previewGrid', this.themeTemplatesPath + '/preview-grid.html' ),\r\n\t\t\tnew GuiTemplate( 'puzzleGrid', this.themeTemplatesPath + '/puzzle-grid.html' ),\r\n\t\t];\r\n\r\n\t\t// load templates\r\n\t\tthis.templates.forEach( ( template ) =>\r\n\t\t{\r\n\t\t\tthis.templatesLoaded.push(\r\n\t\t\t\ttemplate.load()\r\n\t\t\t);\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tpublic drawing methods\r\n\r\n\t/**\r\n\t * - draw all user interfaces once templates are loaded\r\n\t */\r\n\tdraw( puzzle )\r\n\t{\r\n\t\tthis.puzzle = puzzle;\r\n\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tthis.drawGenerateControls();\r\n\t\t\tthis.drawPuzzle( puzzle );\r\n\t\t\tthis.drawGameControls();\r\n\t\t\tthis.drawConsole();\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the puzzle ui\r\n\t *\r\n\t * @param {Puzzle} puzzle\r\n\t */\r\n\tdrawPuzzle( puzzle )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template = this._getTemplate( 'puzzleGrid' );\r\n\r\n\t\t\tthis.puzzle        = puzzle;\r\n\t\t\tthis.gridContainer = document.querySelector( '[data-nonogram-puzzle-grid]' );\r\n\r\n\r\n\t\t\tif (!this.gridContainer) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst container       = this.gridContainer,\r\n\t\t\t\t  node            = template.getNode(),\r\n\t\t\t\t  theadThTemplate = node.querySelector( '[data-nonogram-puzzle-grid-table-thead-th]' ),\r\n\t\t\t\t  rowTemplate     = node.querySelector( '[data-nonogram-puzzle-grid-table-row]' ),\r\n\t\t\t\t  cellClasses     = {\r\n\t\t\t\t\t  tl: 0,\r\n\t\t\t\t\t  tr: this.puzzle.width - 1,\r\n\t\t\t\t\t  bl: (this.puzzle.width * this.puzzle.height) - this.puzzle.width,\r\n\t\t\t\t\t  br: (this.puzzle.width * this.puzzle.height) - 1,\r\n\t\t\t\t  }\r\n\t\t\t;\r\n\r\n\t\t\t// table header\r\n\t\t\tthis.puzzle.columnHints.forEach( ( hints, columnIndex ) =>\r\n\t\t\t{\r\n\t\t\t\tconst clonedTheadThTemplate = document.importNode( theadThTemplate.content, true ),\r\n\t\t\t\t\t  theadTh               = clonedTheadThTemplate.querySelector( 'th' ),\r\n\t\t\t\t\t  fillDiv               = theadTh.querySelector( '.fill' );\r\n\r\n\t\t\t\ttheadTh.setAttribute( 'data-column', columnIndex.toString() );\r\n\t\t\t\ttheadTh.classList.add( 'hint', 'top' );\r\n\r\n\t\t\t\t// add hints\r\n\t\t\t\thints.forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\tfillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\ttheadThTemplate.parentNode.insertBefore( theadTh, theadThTemplate );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// table rows\r\n\r\n\t\t\tthis.puzzle.grid.forEach( ( row, rowKey ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cells             = this.puzzle.getRowCells( rowKey ),\r\n\t\t\t\t\t  clonedRowTemplate = document.importNode( rowTemplate.content, true ),\r\n\t\t\t\t\t  tr                = clonedRowTemplate.querySelector( 'tr' ),\r\n\t\t\t\t\t  cellTemplate      = tr.querySelector( '[data-nonogram-puzzle-grid-table-cell]' ),\r\n\t\t\t\t\t  hintsFillDiv      = tr.querySelector( '[data-row-hints] .fill' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\ttr.setAttribute( 'data-row', rowKey.toString() );\r\n\r\n\t\t\t\t// hint cell\r\n\t\t\t\tthis.puzzle.rowHints[rowKey].forEach( ( hint ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tlet span = document.createElement( 'span' );\r\n\r\n\t\t\t\t\tspan.textContent = hint;\r\n\t\t\t\t\thintsFillDiv.appendChild( span );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// grid cells\r\n\t\t\t\tcells.forEach( ( cell ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedCellTemplate = document.importNode( cellTemplate.content, true ),\r\n\t\t\t\t\t\t  td                 = clonedCellTemplate.querySelector( 'td' )\r\n\t\t\t\t\t;\r\n\r\n\t\t\t\t\ttd.setAttribute( 'data-index', cell.index );\r\n\t\t\t\t\ttd.setAttribute( 'data-column', cell.column );\r\n\t\t\t\t\ttd.setAttribute( 'data-row', cell.row );\r\n\t\t\t\t\ttd.classList.add( 'puzzle-cell', 'flippable' );\r\n\r\n\t\t\t\t\tObject.keys( cellClasses ).forEach( ( cssClass ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (cell.index === cellClasses[cssClass]) {\r\n\t\t\t\t\t\t\ttd.classList.add( cssClass );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\ttr.appendChild( td );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\trowTemplate.parentNode.appendChild( tr );\r\n\t\t\t} );\r\n\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// set board size\r\n\t\t\tdocument.querySelector( '[data-nonogram-puzzle-grid-table]' ).classList.add( this.boardSize.handle );\r\n\r\n\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\tthis._makePuzzlePlayable();\r\n\t\t\tthis.drawPreview( 'userSolution' );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *    - draw the game controls ui\r\n\t */\r\n\tdrawGameControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'gameControls' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-game-controls]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\t\t\tlet fillModeCheckbox;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tfillModeCheckbox = document.querySelector( '#nonogram-puzzle-fill-mode' );\r\n\r\n\t\t\tfillModeCheckbox.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst fillModeLabel = document.querySelector( '[for=\"nonogram-puzzle-fill-mode\"]' ),\r\n\t\t\t\t\t  prevActive    = fillModeLabel.querySelector( '.active' ),\r\n\t\t\t\t\t  prevInactive  = fillModeLabel.querySelector( '.inactive' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\tprevActive.classList.remove( 'active' );\r\n\t\t\t\tprevActive.classList.add( 'inactive' );\r\n\t\t\t\tprevInactive.classList.remove( 'inactive' );\r\n\t\t\t\tprevInactive.classList.add( 'active' );\r\n\r\n\t\t\t\tif (fillModeCheckbox.checked) {\r\n\t\t\t\t\tfillModeLabel.classList.add( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfillModeLabel.classList.remove( 'on' );\r\n\t\t\t\t\tthis.playerClickMode = 1;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\twindow.removeEventListener( 'keyup', Gui._keypressCallback );\r\n\t\t\twindow.addEventListener( 'keyup', Gui._keypressCallback );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw puzzle generating/solving/resetting ui\r\n\t */\r\n\tdrawGenerateControls()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template            = this._getTemplate( 'generateControls' ),\r\n\t\t\t\t  container           = document.querySelector( '[data-nonogram-generate-controls]' ),\r\n\t\t\t\t  node                = template.getNode(),\r\n\t\t\t\t  widthSelect         = node.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t  heightSelect        = node.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t  widthOptions        = node.querySelector( '[data-nonogram-generate-width-options]' ),\r\n\t\t\t\t  heightOptions       = node.querySelector( '[data-nonogram-generate-height-options]' ),\r\n\t\t\t\t  chooseExampleSelect = node.querySelector( '[data-nonogram-choose-predefined]' ),\r\n\t\t\t\t  boardSizeSelect     = node.querySelector( '[data-nonogram-board-size]' ),\r\n\t\t\t\t  boardSizeOptions    = node.querySelector( '[data-nonogram-board-size-options]' )\r\n\t\t\t;\r\n\t\t\tlet i, clonedWidthOptions, cloneHeightOptions, widthOption, heightOption, clonedExampleOptions,\r\n\t\t\t\texampleOption, chooseSelect, boardSize, clonedSizeOptions, sizeOption, reset, solve, generate;\r\n\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// populate width/height select elements\r\n\t\t\tfor (i = 5; i <= 30; i++) {\r\n\r\n\t\t\t\tclonedWidthOptions       = document.importNode( widthOptions.content, true );\r\n\t\t\t\tcloneHeightOptions       = document.importNode( heightOptions.content, true );\r\n\t\t\t\twidthOption              = clonedWidthOptions.querySelector( 'option' );\r\n\t\t\t\twidthOption.textContent  = widthOption.value = i;\r\n\t\t\t\theightOption             = cloneHeightOptions.querySelector( 'option' );\r\n\t\t\t\theightOption.textContent = heightOption.value = i;\r\n\r\n\t\t\t\tif (this.puzzle.width === i) {\r\n\t\t\t\t\twidthOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\t\t\t\tif (this.puzzle.height === i) {\r\n\t\t\t\t\theightOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\twidthSelect.appendChild( widthOption );\r\n\t\t\t\theightSelect.appendChild( heightOption );\r\n\t\t\t}\r\n\r\n\t\t\t// populate predefined puzzles\r\n\r\n\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedExampleOptions = document.importNode( widthOptions.content, true );\r\n\t\t\t\texampleOption        = clonedExampleOptions.querySelector( 'option' );\r\n\r\n\t\t\t\texampleOption.textContent = exampleOption.value = puzzleName;\r\n\r\n\t\t\t\tif (puzzleName === this.selectedExample) {\r\n\t\t\t\t\texampleOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchooseExampleSelect.appendChild( exampleOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// populate board size\r\n\t\t\tthis.boardSizes.forEach( ( sizeObj ) =>\r\n\t\t\t{\r\n\t\t\t\tclonedSizeOptions = document.importNode( boardSizeOptions.content, true );\r\n\t\t\t\tsizeOption        = clonedSizeOptions.querySelector( 'option' );\r\n\r\n\t\t\t\tsizeOption.value       = sizeObj.handle;\r\n\t\t\t\tsizeOption.textContent = sizeObj.name;\r\n\r\n\r\n\t\t\t\tif (sizeObj.handle === this.boardSize.handle) {\r\n\t\t\t\t\tsizeOption.setAttribute( 'selected', 'selected' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tboardSizeSelect.appendChild( sizeOption );\r\n\t\t\t} );\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\r\n\t\t\t// add event handlers\r\n\t\t\tgenerate     = document.querySelector( '[data-nonogram-generate-button]' );\r\n\t\t\tchooseSelect = document.querySelector( '[data-nonogram-choose-predefined]' );\r\n\t\t\tboardSize    = document.querySelector( '[data-nonogram-board-size]' );\r\n\t\t\treset        = document.querySelector( '[data-nonogram-game-reset]' );\r\n\t\t\tsolve        = document.querySelector( '[data-nonogram-game-solve]' );\r\n\r\n\t\t\tgenerate.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tconst widthSelect    = document.querySelector( '[data-nonogram-generate-width]' ),\r\n\t\t\t\t\t  heightSelect   = document.querySelector( '[data-nonogram-generate-height]' ),\r\n\t\t\t\t\t  width          = widthSelect.value,\r\n\t\t\t\t\t  height         = heightSelect.value,\r\n\t\t\t\t\t  creator        = new Creator(),\r\n\t\t\t\t\t  puzzle         = creator.createRandom( width, height, null )\r\n\t\t\t\t;\r\n\t\t\t\tthis.selectedExample = null;\r\n\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t} );\r\n\r\n\t\t\tchooseSelect.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tconst creator = new Creator();\r\n\t\t\t\tlet puzzleDef, puzzle;\r\n\r\n\t\t\t\tif (chooseSelect.value !== '') {\r\n\t\t\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (chooseSelect.value === puzzleName) {\r\n\r\n\t\t\t\t\t\t\tpuzzleDef            = PuzzleLibrary[puzzleName];\r\n\t\t\t\t\t\t\tthis.selectedExample = puzzleName;\r\n\r\n\t\t\t\t\t\t\tif (puzzleDef.solutionGrid) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromGrid( puzzleDef.solutionGrid );\r\n\t\t\t\t\t\t\t} else if (puzzleDef.hints) {\r\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromHints( puzzleDef.hints );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif (puzzle) {\r\n\t\t\t\t\t\tthis.draw( puzzle );\r\n\t\t\t\t\t\tthis._resizeBoardForAvailableScreen();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tboardSize.addEventListener( 'change', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.boardSizes.forEach( ( item ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (item.handle === boardSize.value) {\r\n\t\t\t\t\t\tthis._changeBoardSize( item );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\treset.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis._resetPuzzle();\r\n\t\t\t} );\r\n\r\n\t\t\tsolve.addEventListener( 'click', () =>\r\n\t\t\t{\r\n\t\t\t\tthis.drawSolution();\r\n\t\t\t\tthis.drawPreview( 'solution' );\r\n\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the console and populate with Creator _log\r\n\t */\r\n\tdrawConsole()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'console' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-console]' ),\r\n\t\t\t\t  node      = template.getNode(),\r\n\t\t\t\t  output    = node.querySelector( '[data-nonogram-console-output]' ),\r\n\t\t\t\t  line      = node.querySelector( '[data-nonogram-console-line]' )\r\n\t\t\t;\r\n\r\n\t\t\tif (!container) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.puzzle.creator instanceof Creator) {\r\n\t\t\t\tthis.puzzle.creator.log.forEach( ( text ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst clonedLine = document.importNode( line.content, true ),\r\n\t\t\t\t\t\t  code       = clonedLine.querySelector( 'code' );\r\n\r\n\t\t\t\t\tcode.textContent = text.toString();\r\n\t\t\t\t\toutput.appendChild( code );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\t// insert template\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the preview grid for the current state of the puzzle\r\n\t *\r\n\t * @param solutionType\r\n\t */\r\n\tdrawPreview( solutionType )\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst template  = this._getTemplate( 'previewGrid' ),\r\n\t\t\t\t  container = document.querySelector( '[data-nonogram-preview-grid]' ),\r\n\t\t\t\t  node      = template.getNode()\r\n\t\t\t;\r\n\r\n\t\t\t// insert template\r\n\r\n\t\t\tcontainer.innerHtml = container.textContent = '';\r\n\t\t\tcontainer.appendChild( node.querySelector( '[data-nonogram-preview]' ) );\r\n\r\n\r\n\t\t\t// draw preview canvas\r\n\r\n\t\t\tconst canvas          = document.querySelector( '[data-nonogram-preview-canvas]' ),\r\n\t\t\t\t  ctx             = canvas.getContext( '2d' ),\r\n\t\t\t\t  parentContainer = canvas.parentElement.parentElement.parentElement,\r\n\t\t\t\t  parentWidth     = parentContainer.offsetWidth,\r\n\t\t\t\t  parentHeight    = parentContainer.offsetHeight,\r\n\t\t\t\t  containerRatio  = parentWidth / parentHeight,\r\n\t\t\t\t  puzzleRatio     = this.puzzle.width / this.puzzle.height\r\n\t\t\t;\r\n\t\t\tlet cellSize;\r\n\r\n\t\t\tif (containerRatio > puzzleRatio) {\r\n\t\t\t\tcellSize = Math.floor( parentHeight / this.puzzle.height );\r\n\t\t\t} else {\r\n\t\t\t\tcellSize = Math.floor( parentWidth / this.puzzle.width );\r\n\t\t\t}\r\n\r\n\t\t\tcanvas.width  = cellSize * this.puzzle.width;\r\n\t\t\tcanvas.height = cellSize * this.puzzle.height;\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tif (cell[solutionType] === 1) {\r\n\t\t\t\t\tctx.fillRect( cell.column * cellSize, cell.row * cellSize, cellSize, cellSize );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * - draw the solution to the current puzzle\r\n\t */\r\n\tdrawSolution()\r\n\t{\r\n\t\tPromise.all( this.templatesLoaded ).then( () =>\r\n\t\t{\r\n\t\t\tconst filledTds = this.gridContainer.querySelectorAll( 'td.filled' );\r\n\r\n\r\n\t\t\tfilledTds.forEach( ( td ) =>\r\n\t\t\t{\r\n\t\t\t\ttd.classList.remove( 'filled', 'solution-positive', 'solution-negative', 'user-positive', 'user-negative', 'flipped' );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cellElem = this.gridContainer.querySelector( 'td[data-index=\"' + cell.index + '\"]' );\r\n\r\n\t\t\t\tcell.userSolution = cell.solution;\r\n\t\t\t\tcellElem.classList.add( 'user-solved' );\r\n\r\n\t\t\t\tif (cell.solution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-positive', 'user-positive', 'flipped' );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcellElem.classList.add( 'solution-negative', 'user-negative' );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t// ######################################################################################\tprivate methods\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param {object} boardSize\r\n\t * @private\r\n\t */\r\n\t_changeBoardSize( boardSize )\r\n\t{\r\n\t\tconst puzzleTable = document.querySelector( '[data-nonogram-puzzle-grid-table]' ),\r\n\t\t\t  sizeSelect  = document.querySelector( '[data-nonogram-board-size]' )\r\n\t\t;\r\n\r\n\t\tif (puzzleTable && sizeSelect) {\r\n\r\n\t\t\tpuzzleTable.classList.remove( 'tiny', 'small', 'medium', 'large' );\r\n\t\t\tpuzzleTable.classList.add( boardSize.handle );\r\n\t\t\tsizeSelect.value = boardSize.handle;\r\n\r\n\t\t\tthis.boardSize = boardSize;\r\n\r\n\t\t\tthis.drawPreview();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resizeBoardForAvailableScreen()\r\n\t{\r\n\t\tconst table            = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  availableWidth   = this.gridContainer.clientWidth,\r\n\t\t\t  sortedBoardSizes = this.boardSizes.sort( ( a, b ) =>\r\n\t\t\t  {\r\n\t\t\t\t  return a.size > b.size ? -1 : 1;\r\n\t\t\t  } )\r\n\t\t;\r\n\t\tlet i;\r\n\r\n\r\n\t\tif (table.clientWidth > availableWidth) {\r\n\r\n\t\t\tfor (i = 0; i < sortedBoardSizes.length; i++) {\r\n\r\n\t\t\t\tif (sortedBoardSizes[i].size < this.boardSize.size) {\r\n\r\n\t\t\t\t\tthis._changeBoardSize( sortedBoardSizes[i] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (table.clientWidth <= availableWidth) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawConsole();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_makePuzzlePlayable()\r\n\t{\r\n\t\tconst table    = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  cells    = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  allCells = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td' )\r\n\t\t;\r\n\r\n\t\tthis.playerClickMode = 1;\r\n\r\n\t\t// set css classes and event handlers for puzzle cells\r\n\r\n\t\tcells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.add( 'playable' );\r\n\r\n\t\t\t// highlight row/column on mouse hover\r\n\r\n\t\t\tcellElem.addEventListener( 'mouseenter', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconst hoverCell = e.currentTarget,\r\n\t\t\t\t\t  row       = hoverCell.getAttribute( 'data-row' ),\r\n\t\t\t\t\t  column    = hoverCell.getAttribute( 'data-column' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif (cellElem.getAttribute( 'data-row' ) === row || cellElem.getAttribute( 'data-column' ) === column) {\r\n\t\t\t\t\t\tcellElem.classList.add( 'row-column-highlight' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\t// add cell click event handler\r\n\r\n\t\t\tcellElem.addEventListener( 'click', ( e ) =>\r\n\t\t\t{\r\n\t\t\t\tconst cellElem  = e.currentTarget,\r\n\t\t\t\t\t  cellIndex = cellElem.getAttribute( 'data-index' ),\r\n\t\t\t\t\t  cell      = this.puzzle.getCellByIndex( cellIndex ),\r\n\t\t\t\t\t  solvedP   = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t\t\t;\r\n\r\n\t\t\t\te.preventDefault();\r\n\r\n\t\t\t\tcell.userSolution = cell.userSolution === this.playerClickMode ? null : this.playerClickMode;\r\n\r\n\t\t\t\ttable.classList.remove( 'solved' );\r\n\t\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\r\n\t\t\t\tif (cell.userSolution === 1) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-positive' );\r\n\t\t\t\t} else if (cell.userSolution === 0) {\r\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-negative' );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tcellElem.classList.toggle( 'flipped' );\r\n\r\n\t\t\t\tthis.drawPreview( 'userSolution' );\r\n\r\n\t\t\t\tif (this.puzzle.checkUserSolution()) {\r\n\t\t\t\t\tthis._showPuzzleSolved();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsolvedP.textContent = '';\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\t// remove highlighted cells on puzzle grid mouseout\r\n\r\n\t\ttable.addEventListener( 'mouseleave', () =>\r\n\t\t{\r\n\t\t\tallCells.forEach( ( cellElem ) =>\r\n\t\t\t{\r\n\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\r\n\t\t\t} );\r\n\t\t} );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_resetPuzzle()\r\n\t{\r\n\t\tconst cellElements = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\r\n\t\t\t  puzzleGrid   = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  solvedP      = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\tpuzzleGrid.classList.remove( 'solved' );\r\n\t\tsolvedP.textContent = '';\r\n\r\n\t\tthis.puzzle.cells.forEach( ( cell ) =>\r\n\t\t{\r\n\t\t\tcell.userSolution = null;\r\n\t\t} );\r\n\r\n\t\tcellElements.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\r\n\t\t} );\r\n\r\n\t\tthis.gridContainer.querySelector( '[data-nonogram-preview-grid]' ).innerHTML = '';\r\n\r\n\t\tthis.drawPreview( 'userSolution' );\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_showPuzzleSolved()\r\n\t{\r\n\t\tconst grid       = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\r\n\t\t\t  tableCells = document.querySelectorAll( '[data-nonogram-puzzle-grid-table] .puzzle-cell' ),\r\n\t\t\t  solvedP    = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\r\n\t\t;\r\n\r\n\t\ttableCells.forEach( ( cellElem ) =>\r\n\t\t{\r\n\t\t\tcellElem.classList.remove( 'row-column-highlight' )\r\n\t\t} );\r\n\r\n\t\tgrid.classList.add( 'solved' );\r\n\t\tsolvedP.textContent = 'Solved!';\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @param name\r\n\t * @returns {GuiTemplate}\r\n\t * @throws - error if template could not be found\r\n\t * @private\r\n\t */\r\n\t_getTemplate( name )\r\n\t{\r\n\t\tconst ret = this.templates.find( ( template ) =>\r\n\t\t{\r\n\t\t\treturn template.name === name;\r\n\t\t} );\r\n\r\n\t\tif (!(ret instanceof GuiTemplate)) {\r\n\t\t\tthrow '\"' + name + '\" template not found.';\r\n\t\t}\r\n\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * handle window keypress events\r\n\t *\r\n\t * @param {KeyboardEvent} e\r\n\t * @private\r\n\t */\r\n\tstatic _keypressCallback( e )\r\n\t{\r\n\t\tif (e.key && e.key === 'x') {\r\n\t\t\tdocument.querySelector( '#nonogram-puzzle-fill-mode' ).dispatchEvent( new MouseEvent( 'click' ) );\r\n\t\t}\r\n\t}\r\n\r\n\r\n};\r\n\r\n\r\n\r\n","import {Puzzle} from '../src/puzzle.js';\r\nimport {Creator} from '../src/creator.js';\r\nimport {Solver} from '../src/solver.js';\r\nimport {Gui} from '../src/gui.js';\r\n\r\n\r\nexport {Puzzle, Creator, Solver, Gui};\r\n\r\n\r\n"],"sourceRoot":""}